{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-coffee-script/blob/master/grammars/coffeescript.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-coffee-script/commit/a0da2a73ad817e2fc13c2ef8fcd2624017c39610",
	"name": "CoffeeScript",
	"scopeName": "source.coffee",
	"patterns": [
		{
			"match": "",
			"name": "meta.class.instance.constructor.coffee",
			"captures": {
				"1": {
					"name": "keyword.operator.new.coffee"
				},
				"2": {
					"name": "storage.type.class.coffee"
				},
				"3": {
					"name": "entity.name.type.instance.coffee"
				},
				"4": {
					"name": "entity.name.type.instance.coffee"
				}
			}
		},
		{
			"begin": "'''",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.coffee"
				}
			},
			"end": "'''",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.coffee"
				}
			},
			"name": "string.quoted.single.heredoc.coffee",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.escape.backslash.coffee"
						}
					},
					"match": "",
					"name": "constant.character.escape.backslash.coffee"
				}
			]
		},
		{
			"begin": "\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.coffee"
				}
			},
			"end": "\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.coffee"
				}
			},
			"name": "string.quoted.double.heredoc.coffee",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.escape.backslash.coffee"
						}
					},
					"match": "",
					"name": "constant.character.escape.backslash.coffee"
				},
				{
					"include": "#interpolated_coffee"
				}
			]
		},
		{
			"match": "",
			"name": "string.quoted.script.coffee",
			"captures": {
				"1": {
					"name": "punctuation.definition.string.begin.coffee"
				},
				"2": {
					"name": "source.js.embedded.coffee",
					"patterns": [
						{
							"include": "source.js"
						}
					]
				},
				"3": {
					"name": "punctuation.definition.string.end.coffee"
				}
			}
		},
		{
			"begin": "(?<!#)###(?!#)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.coffee"
				}
			},
			"end": "###",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.coffee"
				}
			},
			"name": "comment.block.coffee",
			"patterns": [
				{
					"match": "",
					"name": "storage.type.annotation.coffee"
				}
			]
		},
		{
			"begin": "#",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.coffee"
				}
			},
			"end": "$",
			"name": "comment.line.number-sign.coffee"
		},
		{
			"begin": "///",
			"end": "(///)[gimuy]*",
			"name": "string.regexp.multiline.coffee",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.coffee"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.coffee"
				}
			},
			"patterns": [
				{
					"include": "#heregexp"
				}
			]
		},
		{
			"begin": "(?<![\\w$])(/)(?=(?![/*+?])(.+)(/)[gimuy]*(?!\\s*[\\w$/(]))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.coffee"
				}
			},
			"end": "(/)[gimuy]*(?!\\s*[\\w$/(])",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.coffee"
				}
			},
			"name": "string.regexp.coffee",
			"patterns": [
				{
					"include": "source.js.regexp"
				}
			]
		},
		{
			"match": "",
			"name": "keyword.control.coffee"
		},
		{
			"match": "",
			"name": "keyword.operator.$1.coffee"
		},
		{
			"match": "",
			"name": "keyword.reserved.coffee"
		},
		{
			"begin": "(?x)\n(?<=\\s|^)((@)?[a-zA-Z_$][\\w$]*)\n\\s*([:=])\\s*\n(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.coffee"
				},
				"2": {
					"name": "variable.other.readwrite.instance.coffee"
				},
				"3": {
					"name": "keyword.operator.assignment.coffee"
				}
			},
			"end": "[=-]>",
			"endCaptures": {
				"0": {
					"name": "storage.type.function.coffee"
				}
			},
			"name": "meta.function.coffee",
			"patterns": [
				{
					"include": "#function_params"
				}
			]
		},
		{
			"begin": "(?x)\n(?<=\\s|^)(?:((')([^']*?)('))|((\")([^\"]*?)(\")))\n\\s*([:=])\\s*\n(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)",
			"beginCaptures": {
				"1": {
					"name": "string.quoted.single.coffee"
				},
				"2": {
					"name": "punctuation.definition.string.begin.coffee"
				},
				"3": {
					"name": "entity.name.function.coffee"
				},
				"4": {
					"name": "punctuation.definition.string.end.coffee"
				},
				"5": {
					"name": "string.quoted.double.coffee"
				},
				"6": {
					"name": "punctuation.definition.string.begin.coffee"
				},
				"7": {
					"name": "entity.name.function.coffee"
				},
				"8": {
					"name": "punctuation.definition.string.end.coffee"
				},
				"9": {
					"name": "keyword.operator.assignment.coffee"
				}
			},
			"end": "[=-]>",
			"endCaptures": {
				"0": {
					"name": "storage.type.function.coffee"
				}
			},
			"name": "meta.function.coffee",
			"patterns": [
				{
					"include": "#function_params"
				}
			]
		},
		{
			"begin": "(?=(\\([^\\(\\)]*\\)\\s*)?[=-]>)",
			"end": "[=-]>",
			"endCaptures": {
				"0": {
					"name": "storage.type.function.coffee"
				}
			},
			"name": "meta.function.inline.coffee",
			"patterns": [
				{
					"include": "#function_params"
				}
			]
		},
		{
			"begin": "(?<=\\s|^)({)(?=[^'\"#]+?}[\\s\\]}]*=)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.destructuring.begin.bracket.curly.coffee"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.destructuring.end.bracket.curly.coffee"
				}
			},
			"name": "meta.variable.assignment.destructured.object.coffee",
			"patterns": [
				{
					"include": "$self"
				},
				{
					"match": "",
					"name": "variable.assignment.coffee"
				}
			]
		},
		{
			"begin": "(?<=\\s|^)(\\[)(?=[^'\"#]+?\\][\\s\\]}]*=)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.destructuring.begin.bracket.square.coffee"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.destructuring.end.bracket.square.coffee"
				}
			},
			"name": "meta.variable.assignment.destructured.array.coffee",
			"patterns": [
				{
					"include": "$self"
				},
				{
					"match": "",
					"name": "variable.assignment.coffee"
				}
			]
		},
		{
			"match": "",
			"name": "constant.language.boolean.true.coffee"
		},
		{
			"match": "",
			"name": "constant.language.boolean.false.coffee"
		},
		{
			"match": "",
			"name": "constant.language.null.coffee"
		},
		{
			"match": "",
			"name": "variable.language.coffee"
		},
		{
			"match": "",
			"name": "variable.language.$1.coffee"
		},
		{
			"captures": {
				"1": {
					"name": "storage.type.class.coffee"
				},
				"2": {
					"name": "keyword.control.inheritance.coffee"
				},
				"3": {
					"name": "entity.other.inherited-class.coffee"
				}
			},
			"match": "",
			"name": "meta.class.coffee"
		},
		{
			"captures": {
				"1": {
					"name": "storage.type.class.coffee"
				},
				"2": {
					"name": "entity.name.type.class.coffee"
				},
				"3": {
					"name": "keyword.control.inheritance.coffee"
				},
				"4": {
					"name": "entity.other.inherited-class.coffee"
				}
			},
			"match": "",
			"name": "meta.class.coffee"
		},
		{
			"match": "",
			"name": "keyword.other.coffee"
		},
		{
			"match": "",
			"name": "support.class.coffee"
		},
		{
			"match": "",
			"name": "entity.name.type.object.coffee"
		},
		{
			"match": "",
			"name": "support.function.console.coffee"
		},
		{
			"match": "",
			"name": "support.function.method.array.coffee"
		},
		{
			"match": "",
			"name": "support.function.static.array.coffee"
		},
		{
			"match": "",
			"name": "support.function.static.object.coffee"
		},
		{
			"match": "",
			"name": "support.function.static.math.coffee"
		},
		{
			"match": "",
			"name": "support.function.static.number.coffee"
		},
		{
			"match": "",
			"name": "support.variable.coffee"
		},
		{
			"match": "",
			"name": "constant.language.coffee"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#method_calls"
		},
		{
			"include": "#function_calls"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#objects"
		},
		{
			"include": "#properties"
		},
		{
			"match": "",
			"name": "keyword.operator.prototype.coffee"
		},
		{
			"match": "",
			"name": "invalid.illegal.identifier.coffee"
		},
		{
			"match": "",
			"name": "punctuation.terminator.statement.coffee"
		},
		{
			"match": "",
			"name": "punctuation.separator.delimiter.coffee"
		},
		{
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.curly.coffee"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "meta.brace.curly.coffee"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.bracket.square.coffee"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.bracket.square.coffee"
				}
			},
			"patterns": [
				{
					"match": "",
					"name": "keyword.operator.slice.exclusive.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.slice.inclusive.coffee"
				},
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.coffee"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.coffee"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"include": "#instance_variable"
		},
		{
			"include": "#single_quoted_string"
		},
		{
			"include": "#double_quoted_string"
		}
	],
	"repository": {
		"arguments": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.begin.bracket.round.coffee"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.coffee"
						}
					},
					"name": "meta.arguments.coffee",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|'))",
					"end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
					"name": "meta.arguments.coffee",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"double_quoted_string": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.coffee"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.coffee"
						}
					},
					"name": "string.quoted.double.coffee",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "punctuation.definition.escape.backslash.coffee"
								}
							},
							"match": "",
							"name": "constant.character.escape.backslash.coffee"
						},
						{
							"include": "#interpolated_coffee"
						}
					]
				}
			]
		},
		"function_calls": {
			"patterns": [
				{
					"begin": "(@)?([\\w$]+)(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "variable.other.readwrite.instance.coffee"
						},
						"2": {
							"patterns": [
								{
									"include": "#function_names"
								}
							]
						}
					},
					"end": "(?<=\\))",
					"name": "meta.function-call.coffee",
					"patterns": [
						{
							"include": "#arguments"
						}
					]
				},
				{
					"begin": "(?x)\n(@)?([\\w$]+)\n\\s*\n(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|')))",
					"beginCaptures": {
						"1": {
							"name": "variable.other.readwrite.instance.coffee"
						},
						"2": {
							"patterns": [
								{
									"include": "#function_names"
								}
							]
						}
					},
					"end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
					"name": "meta.function-call.coffee",
					"patterns": [
						{
							"include": "#arguments"
						}
					]
				}
			]
		},
		"function_names": {
			"patterns": [
				{
					"match": "",
					"name": "support.function.coffee"
				},
				{
					"match": "",
					"name": "entity.name.function.coffee"
				},
				{
					"match": "",
					"name": "invalid.illegal.identifier.coffee"
				}
			]
		},
		"function_params": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.begin.bracket.round.coffee"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.coffee"
						}
					},
					"name": "meta.parameters.coffee",
					"patterns": [
						{
							"match": "",
							"captures": {
								"1": {
									"name": "variable.parameter.function.coffee"
								},
								"2": {
									"name": "keyword.operator.splat.coffee"
								}
							}
						},
						{
							"match": "",
							"captures": {
								"1": {
									"name": "variable.parameter.function.readwrite.instance.coffee"
								},
								"2": {
									"name": "keyword.operator.splat.coffee"
								}
							}
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"embedded_comment": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.coffee"
						}
					},
					"match": "",
					"name": "comment.line.number-sign.coffee"
				}
			]
		},
		"instance_variable": {
			"patterns": [
				{
					"match": "",
					"name": "variable.other.readwrite.instance.coffee"
				}
			]
		},
		"interpolated_coffee": {
			"patterns": [
				{
					"begin": "\\#\\{",
					"captures": {
						"0": {
							"name": "punctuation.section.embedded.coffee"
						}
					},
					"end": "\\}",
					"name": "source.coffee.embedded.source",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"method_calls": {
			"patterns": [
				{
					"begin": "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.method.period.coffee"
						},
						"2": {
							"name": "keyword.operator.prototype.coffee"
						},
						"3": {
							"patterns": [
								{
									"include": "#method_names"
								}
							]
						}
					},
					"end": "(?<=\\))",
					"name": "meta.method-call.coffee",
					"patterns": [
						{
							"include": "#arguments"
						}
					]
				},
				{
					"begin": "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|')))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.method.period.coffee"
						},
						"2": {
							"name": "keyword.operator.prototype.coffee"
						},
						"3": {
							"patterns": [
								{
									"include": "#method_names"
								}
							]
						}
					},
					"end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
					"name": "meta.method-call.coffee",
					"patterns": [
						{
							"include": "#arguments"
						}
					]
				}
			]
		},
		"method_names": {
			"patterns": [
				{
					"match": "",
					"name": "support.function.event-handler.coffee"
				},
				{
					"match": "",
					"name": "support.function.coffee"
				},
				{
					"match": "",
					"name": "support.function.dom.coffee"
				},
				{
					"match": "",
					"name": "entity.name.function.coffee"
				},
				{
					"match": "",
					"name": "invalid.illegal.identifier.coffee"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "",
					"name": "constant.numeric.hex.coffee"
				},
				{
					"match": "",
					"name": "constant.numeric.binary.coffee"
				},
				{
					"match": "",
					"name": "constant.numeric.octal.coffee"
				},
				{
					"match": "",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.coffee"
						},
						"1": {
							"name": "punctuation.separator.decimal.period.coffee"
						},
						"2": {
							"name": "punctuation.separator.decimal.period.coffee"
						},
						"3": {
							"name": "punctuation.separator.decimal.period.coffee"
						},
						"4": {
							"name": "punctuation.separator.decimal.period.coffee"
						},
						"5": {
							"name": "punctuation.separator.decimal.period.coffee"
						},
						"6": {
							"name": "punctuation.separator.decimal.period.coffee"
						}
					}
				}
			]
		},
		"objects": {
			"patterns": [
				{
					"match": "",
					"name": "constant.other.object.coffee"
				},
				{
					"match": "",
					"name": "variable.other.object.coffee"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "variable.assignment.coffee"
						},
						"2": {
							"name": "keyword.operator.assignment.compound.coffee"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "variable.assignment.coffee"
						},
						"2": {
							"name": "keyword.operator.assignment.compound.coffee"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "variable.assignment.coffee"
						},
						"2": {
							"name": "keyword.operator.assignment.compound.bitwise.coffee"
						}
					}
				},
				{
					"match": "",
					"name": "keyword.operator.bitwise.shift.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.comparison.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.logical.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.bitwise.coffee"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "variable.assignment.coffee"
						},
						"2": {
							"name": "keyword.operator.assignment.coffee"
						}
					}
				},
				{
					"match": "",
					"name": "keyword.operator.decrement.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.increment.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.splat.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.existential.coffee"
				},
				{
					"match": "",
					"name": "keyword.operator.coffee"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.operator.logical.coffee"
						},
						"2": {
							"name": "keyword.operator.comparison.coffee"
						}
					}
				}
			]
		},
		"properties": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.separator.property.period.coffee"
						},
						"2": {
							"name": "keyword.operator.prototype.coffee"
						},
						"3": {
							"name": "constant.other.object.property.coffee"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.separator.property.period.coffee"
						},
						"2": {
							"name": "keyword.operator.prototype.coffee"
						},
						"3": {
							"name": "variable.other.object.property.coffee"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.separator.property.period.coffee"
						},
						"2": {
							"name": "keyword.operator.prototype.coffee"
						},
						"3": {
							"name": "constant.other.property.coffee"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.separator.property.period.coffee"
						},
						"2": {
							"name": "keyword.operator.prototype.coffee"
						},
						"3": {
							"name": "variable.other.property.coffee"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.separator.property.period.coffee"
						},
						"2": {
							"name": "keyword.operator.prototype.coffee"
						},
						"3": {
							"name": "invalid.illegal.identifier.coffee"
						}
					}
				}
			]
		},
		"single_quoted_string": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.coffee"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.coffee"
						}
					},
					"name": "string.quoted.single.coffee",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "punctuation.definition.escape.backslash.coffee"
								}
							},
							"match": "",
							"name": "constant.character.escape.backslash.coffee"
						}
					]
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"match": "",
					"name": "constant.character.character-class.regexp"
				},
				{
					"match": "",
					"name": "constant.character.numeric.regexp"
				},
				{
					"match": "",
					"name": "constant.character.control.regexp"
				},
				{
					"match": "",
					"name": "constant.character.escape.backslash.regexp"
				}
			]
		},
		"heregexp": {
			"patterns": [
				{
					"match": "",
					"name": "keyword.control.anchor.regexp"
				},
				{
					"match": "",
					"name": "keyword.other.back-reference.regexp"
				},
				{
					"match": "",
					"name": "keyword.operator.quantifier.regexp"
				},
				{
					"match": "",
					"name": "keyword.operator.or.regexp"
				},
				{
					"begin": "(\\()((\\?=)|(\\?!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"name": "meta.group.assertion.regexp",
					"patterns": [
						{
							"include": "#heregexp"
						}
					]
				},
				{
					"begin": "\\((\\?:)?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"name": "meta.group.regexp",
					"patterns": [
						{
							"include": "#heregexp"
						}
					]
				},
				{
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"name": "constant.other.character-class.set.regexp",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							},
							"match": "",
							"name": "constant.other.character-class.range.regexp"
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				},
				{
					"include": "#interpolated_coffee"
				},
				{
					"include": "#embedded_comment"
				}
			]
		}
	}
}