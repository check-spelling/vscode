{
	"information_for_contributors": [
		"This file has been converted from https://github.com/Microsoft/TypeScript-TmLanguage/blob/master/TypeScriptReact.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/Microsoft/TypeScript-TmLanguage/commit/5c237f767c5cff27910946a3ba65261cc3b6f4bf",
	"name": "JavaScript (with React support)",
	"scopeName": "source.js",
	"patterns": [
		{
			"include": "#directives"
		},
		{
			"include": "#statements"
		},
		{
			"name": "comment.line.shebang.ts",
			"match": "",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.ts"
				}
			}
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#template"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#declaration"
				},
				{
					"include": "#control-statement"
				},
				{
					"include": "#after-operator-block-as-object-literal"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"include": "#decorator"
				},
				{
					"include": "#var-expr"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#interface-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#namespace-declaration"
				},
				{
					"include": "#type-alias-declaration"
				},
				{
					"include": "#import-equals-declaration"
				},
				{
					"include": "#import-declaration"
				},
				{
					"include": "#export-declaration"
				}
			]
		},
		"control-statement": {
			"patterns": [
				{
					"include": "#switch-statement"
				},
				{
					"include": "#for-loop"
				},
				{
					"name": "keyword.control.trycatch.js",
					"match": ""
				},
				{
					"name": "keyword.control.loop.js",
					"match": ""
				},
				{
					"name": "keyword.control.flow.js",
					"match": ""
				},
				{
					"name": "keyword.control.switch.js",
					"match": ""
				},
				{
					"name": "keyword.control.conditional.js",
					"match": ""
				},
				{
					"name": "keyword.control.with.js",
					"match": ""
				},
				{
					"name": "keyword.other.debugger.js",
					"match": ""
				},
				{
					"name": "storage.modifier.js",
					"match": ""
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"expressionWithoutIdentifiers": {
			"patterns": [
				{
					"include": "#jsx"
				},
				{
					"include": "#string"
				},
				{
					"include": "#regex"
				},
				{
					"include": "#template"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#function-expression"
				},
				{
					"include": "#class-expression"
				},
				{
					"include": "#arrow-function"
				},
				{
					"include": "#paren-expression-possibly-arrow"
				},
				{
					"include": "#cast"
				},
				{
					"include": "#ternary-expression"
				},
				{
					"include": "#new-expr"
				},
				{
					"include": "#instanceof-expr"
				},
				{
					"include": "#object-literal"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#support-objects"
				},
				{
					"include": "#paren-expression"
				}
			]
		},
		"expressionPunctuations": {
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-accessor"
				}
			]
		},
		"decorator": {
			"name": "meta.decorator.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@",
			"beginCaptures": {
				"0": {
					"name": "punctuation.decorator.js"
				}
			},
			"end": "(?=\\s)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"var-expr": {
			"name": "meta.var.expr.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?\\b(var|let|const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "storage.type.js"
				}
			},
			"end": "(?=$|^|;|}|(\\s+(of|in)\\s+))",
			"patterns": [
				{
					"include": "#destructuring-variable"
				},
				{
					"include": "#var-single-variable"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#comment"
				},
				{
					"begin": "(,)\\s*(?!\\S)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.comma.js"
						}
					},
					"end": "(?<!,)((?==|;|}|(\\s+(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$))",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#destructuring-variable"
						},
						{
							"include": "#var-single-variable"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"var-single-variable": {
			"patterns": [
				{
					"name": "meta.var-single-variable.expr.js",
					"begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*$) |\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ([\\(]\\s*$) |\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.js entity.name.function.js"
						}
					},
					"end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				},
				{
					"name": "meta.var-single-variable.expr.js",
					"begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.js variable.other.constant.js"
						}
					},
					"end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				},
				{
					"name": "meta.var-single-variable.expr.js",
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
					"beginCaptures": {
						"1": {
							"name": "meta.definition.variable.js variable.other.readwrite.js"
						}
					},
					"end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
					"patterns": [
						{
							"include": "#var-single-variable-type-annotation"
						}
					]
				}
			]
		},
		"var-single-variable-type-annotation": {
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				}
			]
		},
		"destructuring-variable": {
			"patterns": [
				{
					"name": "meta.object-binding-pattern-variable.js",
					"begin": "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)",
					"end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
					"patterns": [
						{
							"include": "#object-binding-pattern"
						},
						{
							"include": "#type-annotation"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"name": "meta.array-binding-pattern-variable.js",
					"begin": "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)",
					"end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
					"patterns": [
						{
							"include": "#array-binding-pattern"
						},
						{
							"include": "#type-annotation"
						},
						{
							"include": "#comment"
						}
					]
				}
			]
		},
		"object-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#object-binding-element-propertyName"
						},
						{
							"include": "#binding-element"
						}
					]
				},
				{
					"include": "#object-binding-pattern"
				},
				{
					"include": "#destructuring-variable-rest"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"object-binding-element-propertyName": {
			"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
			"end": "(:)",
			"endCaptures": {
				"0": {
					"name": "punctuation.destructuring.js"
				}
			},
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"name": "variable.object.property.js",
					"match": ""
				}
			]
		},
		"binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#object-binding-pattern"
				},
				{
					"include": "#array-binding-pattern"
				},
				{
					"include": "#destructuring-variable-rest"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"destructuring-variable-rest": {
			"match": "",
			"captures": {
				"1": {
					"name": "keyword.operator.rest.js"
				},
				"2": {
					"name": "meta.definition.variable.js variable.other.readwrite.js"
				}
			}
		},
		"object-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.js"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.object.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.object.js"
				}
			},
			"patterns": [
				{
					"include": "#object-binding-element"
				}
			]
		},
		"array-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.js"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.array.js"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.array.js"
				}
			},
			"patterns": [
				{
					"include": "#binding-element"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter-name": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.modifier.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.modifier.js"
						},
						"2": {
							"name": "keyword.operator.rest.js"
						},
						"3": {
							"name": "entity.name.function.js variable.language.this.js"
						},
						"4": {
							"name": "entity.name.function.js"
						},
						"5": {
							"name": "keyword.operator.optional.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.modifier.js"
						},
						"2": {
							"name": "keyword.operator.rest.js"
						},
						"3": {
							"name": "variable.parameter.js variable.language.this.js"
						},
						"4": {
							"name": "variable.parameter.js"
						},
						"5": {
							"name": "keyword.operator.optional.js"
						}
					}
				}
			]
		},
		"destructuring-parameter": {
			"patterns": [
				{
					"name": "meta.parameter.object-binding-pattern.js",
					"begin": "(?<!=|:)\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.binding-pattern.object.js"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.binding-pattern.object.js"
						}
					},
					"patterns": [
						{
							"include": "#parameter-object-binding-element"
						}
					]
				},
				{
					"name": "meta.paramter.array-binding-pattern.js",
					"begin": "(?<!=|:)\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.binding-pattern.array.js"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.binding-pattern.array.js"
						}
					},
					"patterns": [
						{
							"include": "#parameter-binding-element"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"parameter-object-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#object-binding-element-propertyName"
						},
						{
							"include": "#parameter-binding-element"
						}
					]
				},
				{
					"include": "#parameter-object-binding-pattern"
				},
				{
					"include": "#destructuring-parameter-rest"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter-binding-element": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parameter-object-binding-pattern"
				},
				{
					"include": "#parameter-array-binding-pattern"
				},
				{
					"include": "#destructuring-parameter-rest"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"destructuring-parameter-rest": {
			"match": "",
			"captures": {
				"1": {
					"name": "keyword.operator.rest.js"
				},
				"2": {
					"name": "variable.parameter.js"
				}
			}
		},
		"parameter-object-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.js"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.object.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.object.js"
				}
			},
			"patterns": [
				{
					"include": "#parameter-object-binding-element"
				}
			]
		},
		"parameter-array-binding-pattern": {
			"begin": "(?:(\\.\\.\\.)\\s*)?(\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.rest.js"
				},
				"2": {
					"name": "punctuation.definition.binding-pattern.array.js"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.binding-pattern.array.js"
				}
			},
			"patterns": [
				{
					"include": "#parameter-binding-element"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"field-declaration": {
			"name": "meta.field.declaration.js",
			"begin": "(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.js"
				}
			},
			"end": "(?=\\}|;|,|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?<=\\})",
			"patterns": [
				{
					"include": "#variable-initializer"
				},
				{
					"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))",
					"end": "(?=[};,=]|$|(^(?!(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\?\\s*)?(=|:))))|(?<=\\})",
					"patterns": [
						{
							"include": "#type-annotation"
						},
						{
							"include": "#string"
						},
						{
							"include": "#array-literal"
						},
						{
							"include": "#comment"
						},
						{
							"match": "",
							"captures": {
								"1": {
									"name": "meta.definition.property.js entity.name.function.js"
								},
								"2": {
									"name": "keyword.operator.optional.js"
								}
							}
						},
						{
							"name": "meta.definition.property.js variable.object.property.js",
							"match": ""
						},
						{
							"name": "keyword.operator.optional.js",
							"match": ""
						}
					]
				}
			]
		},
		"variable-initializer": {
			"patterns": [
				{
					"begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.js"
						}
					},
					"end": "(?=$|^|[,);}\\]])",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "(?<!=|!)(=)(?!=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.js"
						}
					},
					"end": "(?=[,);}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"function-declaration": {
			"name": "meta.function.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(export)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "storage.modifier.async.js"
				},
				"3": {
					"name": "storage.type.function.js"
				},
				"4": {
					"name": "keyword.generator.asterisk.js"
				},
				"5": {
					"name": "meta.definition.function.js entity.name.function.js"
				}
			},
			"end": "(?=$|^|;)|(?<=\\})",
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#function-body"
				}
			]
		},
		"function-expression": {
			"name": "meta.function.expression.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.async.js"
				},
				"2": {
					"name": "storage.type.function.js"
				},
				"3": {
					"name": "keyword.generator.asterisk.js"
				},
				"4": {
					"name": "meta.definition.function.js entity.name.function.js"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#function-name"
				},
				{
					"include": "#function-body"
				}
			]
		},
		"function-name": {
			"name": "meta.definition.function.js entity.name.function.js",
			"match": ""
		},
		"function-body": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#return-type"
				},
				{
					"include": "#decl-block"
				},
				{
					"name": "keyword.generator.asterisk.js",
					"match": ""
				}
			]
		},
		"method-declaration": {
			"patterns": [
				{
					"name": "meta.method.declaration.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\<])",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.js"
						},
						"2": {
							"name": "storage.modifier.js"
						},
						"3": {
							"name": "storage.modifier.async.js"
						},
						"4": {
							"name": "storage.type.property.js"
						},
						"5": {
							"name": "keyword.generator.asterisk.js"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#method-declaration-name"
						},
						{
							"include": "#function-body"
						}
					]
				},
				{
					"name": "meta.method.declaration.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\b(?:(new)|(constructor))\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))?\\s*[\\(\\<]))",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.js"
						},
						"2": {
							"name": "storage.modifier.js"
						},
						"3": {
							"name": "storage.modifier.async.js"
						},
						"4": {
							"name": "keyword.operator.new.js"
						},
						"5": {
							"name": "storage.type.js"
						},
						"6": {
							"name": "keyword.generator.asterisk.js"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#method-declaration-name"
						},
						{
							"include": "#function-body"
						}
					]
				}
			]
		},
		"object-literal-method-declaration": {
			"name": "meta.method.declaration.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\<])",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.async.js"
				},
				"2": {
					"name": "storage.type.property.js"
				},
				"3": {
					"name": "keyword.generator.asterisk.js"
				}
			},
			"end": "(?=\\}|;|,)|(?<=\\})",
			"patterns": [
				{
					"include": "#method-declaration-name"
				},
				{
					"include": "#function-body"
				},
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=((([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*[\\(\\<])",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.js"
						},
						"2": {
							"name": "storage.type.property.js"
						},
						"3": {
							"name": "keyword.generator.asterisk.js"
						}
					},
					"end": "(?=\\(|\\<)",
					"patterns": [
						{
							"include": "#method-declaration-name"
						}
					]
				}
			]
		},
		"method-declaration-name": {
			"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
			"end": "(?=\\(|\\<)",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"name": "meta.definition.method.js entity.name.function.js",
					"match": ""
				},
				{
					"name": "keyword.operator.optional.js",
					"match": ""
				}
			]
		},
		"arrow-function": {
			"patterns": [
				{
					"name": "meta.arrow.js",
					"match": "",
					"captures": {
						"1": {
							"name": "storage.modifier.async.js"
						},
						"2": {
							"name": "variable.parameter.js"
						}
					}
				},
				{
					"name": "meta.arrow.js",
					"begin": "(?x) (?:\n  (?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\n)? ((?<![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                                              # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^()]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\)))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  )\n)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.js"
						}
					},
					"end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#type-parameters"
						},
						{
							"include": "#function-parameters"
						},
						{
							"include": "#arrow-return-type"
						}
					]
				},
				{
					"name": "meta.arrow.js",
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.arrow.js"
						}
					},
					"end": "(?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S))",
					"patterns": [
						{
							"include": "#decl-block"
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"indexer-declaration": {
			"name": "meta.indexer.declaration.js",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.js"
				},
				"2": {
					"name": "meta.brace.square.js"
				},
				"3": {
					"name": "variable.parameter.js"
				}
			},
			"end": "(\\])\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.js"
				},
				"2": {
					"name": "keyword.operator.optional.js"
				}
			},
			"patterns": [
				{
					"include": "#type-annotation"
				}
			]
		},
		"indexer-mapped-type-declaration": {
			"name": "meta.indexer.mappedtype.declaration.js",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.modifier.js"
				},
				"2": {
					"name": "storage.modifier.js"
				},
				"3": {
					"name": "meta.brace.square.js"
				},
				"4": {
					"name": "entity.name.type.js"
				},
				"5": {
					"name": "keyword.operator.expression.in.js"
				}
			},
			"end": "(\\])([+-])?\\s*(\\?\\s*)?|$",
			"endCaptures": {
				"1": {
					"name": "meta.brace.square.js"
				},
				"2": {
					"name": "keyword.operator.type.modifier.js"
				},
				"3": {
					"name": "keyword.operator.optional.js"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"function-parameters": {
			"name": "meta.parameters.js",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.js"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.js"
				}
			},
			"patterns": [
				{
					"include": "#function-parameters-body"
				}
			]
		},
		"function-parameters-body": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#destructuring-parameter"
				},
				{
					"include": "#parameter-name"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"name": "punctuation.separator.parameter.js",
					"match": ""
				}
			]
		},
		"class-declaration": {
			"name": "meta.class.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "storage.modifier.js"
				},
				"3": {
					"name": "storage.type.class.js"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#class-declaration-or-expression-patterns"
				}
			]
		},
		"class-expression": {
			"name": "meta.class.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(class)\\b(?=\\s+|[<{]|/[/*])",
			"beginCaptures": {
				"1": {
					"name": "storage.type.class.js"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#class-declaration-or-expression-patterns"
				}
			]
		},
		"class-declaration-or-expression-patterns": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"match": "",
					"captures": {
						"0": {
							"name": "entity.name.type.class.js"
						}
					}
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"interface-declaration": {
			"name": "meta.interface.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(export)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "storage.modifier.js"
				},
				"3": {
					"name": "storage.type.interface.js"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"match": "",
					"captures": {
						"0": {
							"name": "entity.name.type.interface.js"
						}
					}
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#class-or-interface-body"
				}
			]
		},
		"class-or-interface-heritage": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.js"
				}
			},
			"end": "(?=\\{)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#class-or-interface-heritage"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "entity.name.type.module.js"
						},
						"2": {
							"name": "punctuation.accessor.js"
						},
						"3": {
							"name": "punctuation.accessor.optional.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "entity.other.inherited-class.js"
						}
					}
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"class-or-interface-body": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#decorator"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#access-modifier"
				},
				{
					"include": "#property-accessor"
				},
				{
					"include": "#async-modifier"
				},
				{
					"include": "#after-operator-block-as-object-literal"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"access-modifier": {
			"name": "storage.modifier.js",
			"match": ""
		},
		"property-accessor": {
			"name": "storage.type.property.js",
			"match": ""
		},
		"async-modifier": {
			"name": "storage.modifier.async.js",
			"match": ""
		},
		"enum-declaration": {
			"name": "meta.enum.declaration.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "storage.modifier.js"
				},
				"3": {
					"name": "storage.type.enum.js"
				},
				"4": {
					"name": "entity.name.type.enum.js"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.block.js"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.block.js"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.other.enummember.js"
								}
							},
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"begin": "(?=((\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#array-literal"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"namespace-declaration": {
			"name": "meta.namespace.declaration.js",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "storage.type.namespace.js"
				}
			},
			"end": "(?<=\\})|(?=;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.js",
					"match": ""
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"type-alias-declaration": {
			"name": "meta.type.declaration.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "storage.type.type.js"
				},
				"3": {
					"name": "entity.name.type.alias.js"
				}
			},
			"end": "(?=\\}|;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.operator.assignment.js"
						}
					}
				}
			]
		},
		"import-equals-declaration": {
			"patterns": [
				{
					"name": "meta.import-equals.external.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.js"
						},
						"2": {
							"name": "keyword.control.import.js"
						},
						"3": {
							"name": "variable.other.readwrite.alias.js"
						},
						"4": {
							"name": "keyword.operator.assignment.js"
						},
						"5": {
							"name": "keyword.control.require.js"
						},
						"6": {
							"name": "meta.brace.round.js"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.js"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"name": "meta.import-equals.internal.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?\\b(import)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.js"
						},
						"2": {
							"name": "keyword.control.import.js"
						},
						"3": {
							"name": "variable.other.readwrite.alias.js"
						},
						"4": {
							"name": "keyword.operator.assignment.js"
						}
					},
					"end": "(?=;|$|^)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"match": "",
							"captures": {
								"1": {
									"name": "entity.name.type.module.js"
								},
								"2": {
									"name": "punctuation.accessor.js"
								},
								"3": {
									"name": "punctuation.accessor.optional.js"
								}
							}
						},
						{
							"name": "variable.other.readwrite.js",
							"match": ""
						}
					]
				}
			]
		},
		"import-declaration": {
			"name": "meta.import.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?\\b(import)(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.js"
				},
				"2": {
					"name": "keyword.control.import.js"
				}
			},
			"end": "(?=;|$|^)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"begin": "(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*[\"'])",
					"end": "\\bfrom\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.from.js"
						}
					},
					"patterns": [
						{
							"include": "#import-export-declaration"
						}
					]
				},
				{
					"include": "#import-export-declaration"
				}
			]
		},
		"export-declaration": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.control.export.js"
						},
						"2": {
							"name": "keyword.control.as.js"
						},
						"3": {
							"name": "storage.type.namespace.js"
						},
						"4": {
							"name": "entity.name.type.module.js"
						}
					}
				},
				{
					"name": "meta.export.default.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.js"
						},
						"2": {
							"name": "keyword.operator.assignment.js"
						},
						"3": {
							"name": "keyword.control.default.js"
						}
					},
					"end": "(?=$|;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.export.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?!\\s*:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.export.js"
						}
					},
					"end": "(?=$|;|\\babstract\\b|\\basync\\b|\\bclass\\b|\\bconst\\b|\\bdeclare\\b|\\benum\\b|\\bexport\\b|\\bfunction\\b|\\bimport\\b|\\binterface\\b|\\blet\\b|\\bmodule\\b|\\bnamespace\\b|\\breturn\\b|\\btype\\b|\\bvar\\b)",
					"patterns": [
						{
							"include": "#import-export-declaration"
						}
					]
				}
			]
		},
		"import-export-declaration": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#import-export-block"
				},
				{
					"name": "keyword.control.from.js",
					"match": ""
				},
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-block": {
			"name": "meta.block.js",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"patterns": [
				{
					"include": "#import-export-clause"
				}
			]
		},
		"import-export-clause": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.control.default.js"
						},
						"2": {
							"name": "constant.language.import-export-all.js"
						},
						"3": {
							"name": "variable.other.readwrite.js"
						},
						"4": {
							"name": "keyword.control.as.js"
						},
						"5": {
							"name": "keyword.control.default.js"
						},
						"6": {
							"name": "variable.other.readwrite.alias.js"
						}
					}
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"name": "constant.language.import-export-all.js",
					"match": ""
				},
				{
					"name": "keyword.control.default.js",
					"match": ""
				},
				{
					"name": "variable.other.readwrite.alias.js",
					"match": ""
				}
			]
		},
		"switch-statement": {
			"name": "switch-statement.expr.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bswitch\\s*\\()",
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"patterns": [
				{
					"name": "switch-expression.expr.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(switch)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.switch.js"
						},
						"2": {
							"name": "meta.brace.round.js"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.js"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "switch-block.expr.js",
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.block.js"
						}
					},
					"end": "(?=\\})",
					"patterns": [
						{
							"name": "case-clause.expr.js",
							"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.switch.js"
								}
							},
							"end": ":",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.section.case-statement.js"
								}
							},
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						{
							"include": "#statements"
						}
					]
				}
			]
		},
		"for-loop": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.loop.js"
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "keyword.control.loop.js",
					"match": ""
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "meta.brace.round.js"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.js"
						}
					},
					"patterns": [
						{
							"include": "#var-expr"
						},
						{
							"include": "#expression"
						},
						{
							"include": "#punctuation-semicolon"
						}
					]
				}
			]
		},
		"decl-block": {
			"name": "meta.block.js",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"patterns": [
				{
					"include": "#statements"
				}
			]
		},
		"after-operator-block-as-object-literal": {
			"name": "meta.objectliteral.js",
			"begin": "(?<!\\+\\+|--)(?<=[=(,\\[?+!]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&&|\\|\\||\\*)\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.block.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"object-literal": {
			"name": "meta.objectliteral.js",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"object-member": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#object-literal-method-declaration"
				},
				{
					"name": "meta.object.member.js meta.object-literal.key.js",
					"begin": "(?=\\[)",
					"end": "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))",
					"patterns": [
						{
							"include": "#array-literal"
						}
					]
				},
				{
					"name": "meta.object.member.js meta.object-literal.key.js",
					"begin": "(?=[\\'\\\"])",
					"end": "(?=:)|((?<=[\\'\\\"])(?=\\s*[\\(\\<]))",
					"patterns": [
						{
							"include": "#string"
						}
					]
				},
				{
					"name": "meta.method.declaration.js",
					"begin": "(?<=[\\]\\'\\\"])(?=\\s*[\\(\\<])",
					"end": "(?=\\}|;|,)|(?<=\\})",
					"patterns": [
						{
							"include": "#function-body"
						}
					]
				},
				{
					"name": "meta.object.member.js",
					"match": "",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.js"
						},
						"1": {
							"name": "constant.numeric.decimal.js"
						}
					}
				},
				{
					"name": "meta.object.member.js",
					"match": "",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.js"
						},
						"1": {
							"name": "entity.name.function.js"
						}
					}
				},
				{
					"name": "meta.object.member.js",
					"match": "",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.js"
						}
					}
				},
				{
					"name": "meta.object.member.js",
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.js"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.js",
					"match": "",
					"captures": {
						"1": {
							"name": "variable.other.readwrite.js"
						}
					}
				},
				{
					"name": "meta.object.member.js",
					"begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
					"end": "(?=,|\\}|$)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.object.member.js",
					"begin": ":",
					"beginCaptures": {
						"0": {
							"name": "meta.object-literal.key.js punctuation.separator.key-value.js"
						}
					},
					"end": "(?=,|\\})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"ternary-expression": {
			"begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.ternary.js"
				}
			},
			"end": "\\s*(:)",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.ternary.js"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"function-call": {
			"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?\\.\\s*)?(<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?!=)\\>)*(?!=)>\\s*)?\\()",
			"end": "(?<=\\))(?!(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?\\.\\s*)?(<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?!=)\\>)*(?!=)>\\s*)?\\()",
			"patterns": [
				{
					"name": "meta.function-call.js",
					"begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
					"end": "(?=\\s*(\\?\\.\\s*)?(<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?!=)\\>)*(?!=)>\\s*)?\\()",
					"patterns": [
						{
							"include": "#literal"
						},
						{
							"include": "#support-objects"
						},
						{
							"include": "#object-identifiers"
						},
						{
							"include": "#punctuation-accessor"
						},
						{
							"name": "keyword.operator.expression.import.js",
							"match": ""
						},
						{
							"name": "entity.name.function.js",
							"match": ""
						}
					]
				},
				{
					"include": "#comment"
				},
				{
					"name": "meta.function-call.js punctuation.accessor.optional.js",
					"match": ""
				},
				{
					"include": "#type-arguments"
				},
				{
					"include": "#paren-expression"
				}
			]
		},
		"new-expr": {
			"name": "new.expr.js",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.new.js"
				}
			},
			"end": "(?<=\\))|(?=[;),}\\]:]|\\|\\||\\&\\&|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
			"patterns": [
				{
					"include": "#paren-expression"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#type"
				}
			]
		},
		"instanceof-expr": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.instanceof.js"
				}
			},
			"end": "(?<=\\))|(?=[;),}\\]:]|\\|\\||\\&\\&|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"paren-expression-possibly-arrow": {
			"patterns": [
				{
					"begin": "(?<=[(=,]|=>)\\s*(async)?(?=\\s*(<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\]))([^=<>]|=[^<])*\\>)*>\\s*)\\(\\s*$)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.js"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#type-parameters"
						},
						{
							"begin": "\\(",
							"beginCaptures": {
								"0": {
									"name": "meta.brace.round.js"
								}
							},
							"end": "\\)",
							"endCaptures": {
								"0": {
									"name": "meta.brace.round.js"
								}
							},
							"patterns": [
								{
									"include": "#expression-inside-possibly-arrow-parens"
								}
							]
						}
					]
				},
				{
					"begin": "(?<=[(=,]|=>)\\s*(async)?\\s*(\\()(?=\\s*$)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.async.js"
						},
						"2": {
							"name": "meta.brace.round.js"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.js"
						}
					},
					"patterns": [
						{
							"include": "#expression-inside-possibly-arrow-parens"
						}
					]
				},
				{
					"include": "#possibly-arrow-return-type"
				}
			]
		},
		"expression-inside-possibly-arrow-parens": {
			"patterns": [
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"include": "#function-parameters-body"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"paren-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.js"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.js"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"cast": {
			"patterns": [
				{
					"include": "#jsx"
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.control.flow.js",
					"match": ""
				},
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.flow.js"
						}
					},
					"end": "\\*",
					"endCaptures": {
						"0": {
							"name": "keyword.generator.asterisk.js"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						}
					]
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.control.flow.js"
						},
						"2": {
							"name": "keyword.generator.asterisk.js"
						}
					}
				},
				{
					"name": "keyword.operator.expression.delete.js",
					"match": ""
				},
				{
					"name": "keyword.operator.expression.in.js",
					"match": ""
				},
				{
					"name": "keyword.operator.expression.of.js",
					"match": ""
				},
				{
					"name": "keyword.operator.expression.instanceof.js",
					"match": ""
				},
				{
					"name": "keyword.operator.new.js",
					"match": ""
				},
				{
					"include": "#typeof-operator"
				},
				{
					"name": "keyword.operator.expression.void.js",
					"match": ""
				},
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.as.js"
						}
					},
					"end": "(?=$|^|[;,:})\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "keyword.operator.spread.js",
					"match": ""
				},
				{
					"name": "keyword.operator.assignment.compound.js",
					"match": ""
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.js",
					"match": ""
				},
				{
					"name": "keyword.operator.bitwise.shift.js",
					"match": ""
				},
				{
					"name": "keyword.operator.comparison.js",
					"match": ""
				},
				{
					"name": "keyword.operator.relational.js",
					"match": ""
				},
				{
					"name": "keyword.operator.logical.js",
					"match": ""
				},
				{
					"name": "keyword.operator.bitwise.js",
					"match": ""
				},
				{
					"name": "keyword.operator.assignment.js",
					"match": ""
				},
				{
					"name": "keyword.operator.decrement.js",
					"match": ""
				},
				{
					"name": "keyword.operator.increment.js",
					"match": ""
				},
				{
					"name": "keyword.operator.arithmetic.js",
					"match": ""
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.operator.arithmetic.js"
						}
					}
				}
			]
		},
		"typeof-operator": {
			"name": "keyword.operator.expression.typeof.js",
			"match": ""
		},
		"literal": {
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#undefined-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#this-literal"
				},
				{
					"include": "#super-literal"
				}
			]
		},
		"array-literal": {
			"name": "meta.array.literal.js",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.js"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.js"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.js",
					"match": ""
				},
				{
					"name": "constant.numeric.binary.js",
					"match": ""
				},
				{
					"name": "constant.numeric.octal.js",
					"match": ""
				},
				{
					"match": "",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.js"
						},
						"1": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"2": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"3": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"4": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"5": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"6": {
							"name": "meta.delimiter.decimal.period.js"
						}
					}
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.js",
					"match": ""
				},
				{
					"name": "constant.language.boolean.false.js",
					"match": ""
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.js",
			"match": ""
		},
		"this-literal": {
			"name": "variable.language.this.js",
			"match": ""
		},
		"super-literal": {
			"name": "variable.language.super.js",
			"match": ""
		},
		"undefined-literal": {
			"name": "constant.language.undefined.js",
			"match": ""
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.nan.js",
					"match": ""
				},
				{
					"name": "constant.language.infinity.js",
					"match": ""
				}
			]
		},
		"support-objects": {
			"patterns": [
				{
					"name": "variable.language.arguments.js",
					"match": ""
				},
				{
					"name": "support.class.builtin.js",
					"match": ""
				},
				{
					"name": "support.class.error.js",
					"match": ""
				},
				{
					"name": "support.class.promise.js",
					"match": ""
				},
				{
					"name": "support.function.js",
					"match": ""
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.constant.math.js"
						},
						"2": {
							"name": "punctuation.accessor.js"
						},
						"3": {
							"name": "punctuation.accessor.optional.js"
						},
						"4": {
							"name": "support.function.math.js"
						},
						"5": {
							"name": "support.constant.property.math.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.class.console.js"
						},
						"2": {
							"name": "punctuation.accessor.js"
						},
						"3": {
							"name": "punctuation.accessor.optional.js"
						},
						"4": {
							"name": "support.function.console.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.constant.json.js"
						},
						"2": {
							"name": "punctuation.accessor.js"
						},
						"3": {
							"name": "punctuation.accessor.optional.js"
						},
						"4": {
							"name": "support.function.json.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.accessor.js"
						},
						"2": {
							"name": "punctuation.accessor.optional.js"
						},
						"3": {
							"name": "support.variable.property.js"
						},
						"4": {
							"name": "support.constant.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.variable.dom.js"
						},
						"2": {
							"name": "support.class.dom.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.accessor.js"
						},
						"2": {
							"name": "punctuation.accessor.optional.js"
						},
						"3": {
							"name": "support.constant.dom.js"
						},
						"4": {
							"name": "support.variable.property.dom.js"
						}
					}
				},
				{
					"name": "support.class.node.js",
					"match": ""
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.variable.object.process.js"
						},
						"2": {
							"name": "punctuation.accessor.js"
						},
						"3": {
							"name": "punctuation.accessor.optional.js"
						},
						"4": {
							"name": "support.variable.property.process.js"
						},
						"5": {
							"name": "support.function.process.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.type.object.module.js"
						},
						"2": {
							"name": "support.type.object.module.js"
						},
						"3": {
							"name": "punctuation.accessor.js"
						},
						"4": {
							"name": "punctuation.accessor.optional.js"
						},
						"5": {
							"name": "support.type.object.module.js"
						}
					}
				},
				{
					"name": "support.variable.object.node.js",
					"match": ""
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.accessor.js"
						},
						"2": {
							"name": "punctuation.accessor.optional.js"
						},
						"3": {
							"name": "support.function.event-handler.js"
						},
						"4": {
							"name": "support.function.js"
						},
						"5": {
							"name": "support.function.dom.js"
						},
						"6": {
							"name": "support.function.promise.js"
						}
					}
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"include": "#object-identifiers"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.accessor.js"
						},
						"2": {
							"name": "punctuation.accessor.optional.js"
						},
						"3": {
							"name": "entity.name.function.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.accessor.js"
						},
						"2": {
							"name": "punctuation.accessor.optional.js"
						},
						"3": {
							"name": "variable.other.constant.property.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.accessor.js"
						},
						"2": {
							"name": "punctuation.accessor.optional.js"
						},
						"3": {
							"name": "variable.other.property.js"
						}
					}
				},
				{
					"name": "variable.other.constant.js",
					"match": ""
				},
				{
					"name": "variable.other.readwrite.js",
					"match": ""
				}
			]
		},
		"object-identifiers": {
			"patterns": [
				{
					"name": "support.class.js",
					"match": ""
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.accessor.js"
						},
						"2": {
							"name": "punctuation.accessor.optional.js"
						},
						"3": {
							"name": "variable.other.constant.object.property.js"
						},
						"4": {
							"name": "variable.other.object.property.js"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "variable.other.constant.object.js"
						},
						"2": {
							"name": "variable.other.object.js"
						}
					}
				}
			]
		},
		"type-annotation": {
			"patterns": [
				{
					"name": "meta.type.annotation.js",
					"begin": "(:)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.js"
						}
					},
					"end": "(?<![:|&])((?=$|^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "meta.type.annotation.js",
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.js"
						}
					},
					"end": "(?<![:|&])((?=[,);\\}\\]]|//)|(?==[^>])|(?=^\\s*$)|((?<=\\S)(?=\\s*$))|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"return-type": {
			"patterns": [
				{
					"name": "meta.return.type.js",
					"begin": "(?<=\\))\\s*(:)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.js"
						}
					},
					"end": "(?<![:|&])(?=$|^|[{};,]|//)",
					"patterns": [
						{
							"include": "#return-type-core"
						}
					]
				},
				{
					"name": "meta.return.type.js",
					"begin": "(?<=\\))\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.js"
						}
					},
					"end": "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
					"patterns": [
						{
							"include": "#return-type-core"
						}
					]
				}
			]
		},
		"return-type-core": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?<=[:|&])(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"arrow-return-type": {
			"name": "meta.return.type.arrow.js",
			"begin": "(?<=\\))\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.annotation.js"
				}
			},
			"end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
			"patterns": [
				{
					"include": "#arrow-return-type-body"
				}
			]
		},
		"possibly-arrow-return-type": {
			"begin": "(?<=\\))\\s*(:)(?=\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+\\s*=>)",
			"beginCaptures": {
				"1": {
					"name": "meta.arrow.js meta.return.type.arrow.js keyword.operator.type.annotation.js"
				}
			},
			"end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
			"contentName": "meta.arrow.js meta.return.type.arrow.js",
			"patterns": [
				{
					"include": "#arrow-return-type-body"
				}
			]
		},
		"arrow-return-type-body": {
			"patterns": [
				{
					"begin": "(?<=[:])(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-parameters": {
			"name": "meta.type.parameters.js",
			"begin": "(<)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.begin.js"
				}
			},
			"end": "(>)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.end.js"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "storage.modifier.js",
					"match": ""
				},
				{
					"name": "keyword.operator.assignment.js",
					"match": ""
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-arguments": {
			"name": "meta.type.parameters.js",
			"begin": "\\<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.js"
				}
			},
			"end": "\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.js"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#type-primitive"
				},
				{
					"include": "#type-builtin-literals"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type-tuple"
				},
				{
					"include": "#type-object"
				},
				{
					"include": "#type-conditional"
				},
				{
					"include": "#type-operators"
				},
				{
					"include": "#type-fn-type-parameters"
				},
				{
					"include": "#type-paren-or-function-parameters"
				},
				{
					"include": "#type-function-return-type"
				},
				{
					"include": "#type-name"
				}
			]
		},
		"type-primitive": {
			"name": "support.type.primitive.js",
			"match": ""
		},
		"type-builtin-literals": {
			"name": "support.type.builtin.js",
			"match": ""
		},
		"type-tuple": {
			"name": "meta.type.tuple.js",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.js"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.js"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-object": {
			"name": "meta.object.type.js",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.js"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#indexer-mapped-type-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"begin": "\\.\\.\\.",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.spread.js"
						}
					},
					"end": "(?=\\}|;|,|$)|(?<=\\})",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-conditional": {
			"match": "",
			"captures": {
				"1": {
					"name": "storage.modifier.js"
				}
			}
		},
		"type-paren-or-function-parameters": {
			"name": "meta.type.paren.cover.js",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.js"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.js"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#function-parameters"
				}
			]
		},
		"type-fn-type-parameters": {
			"patterns": [
				{
					"name": "meta.type.constructor.js",
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.control.new.js"
						}
					}
				},
				{
					"name": "meta.type.constructor.js",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\b\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.new.js"
						}
					},
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"name": "meta.type.function.js",
					"begin": "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )\n  )\n)",
					"end": "(?<=\\))",
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				}
			]
		},
		"type-function-return-type": {
			"patterns": [
				{
					"name": "meta.type.function.return.js",
					"begin": "(=>)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.arrow.js"
						}
					},
					"end": "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>]|//|$)",
					"patterns": [
						{
							"include": "#type-function-return-type-core"
						}
					]
				},
				{
					"name": "meta.type.function.return.js",
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.arrow.js"
						}
					},
					"end": "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
					"patterns": [
						{
							"include": "#type-function-return-type-core"
						}
					]
				}
			]
		},
		"type-function-return-type-core": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?<==>)(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-operators": {
			"patterns": [
				{
					"include": "#typeof-operator"
				},
				{
					"begin": "([&|])(?=\\s*\\{)",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.type.js"
						}
					},
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"begin": "[&|]",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.type.js"
						}
					},
					"end": "(?=\\S)"
				},
				{
					"name": "keyword.operator.expression.keyof.js",
					"match": ""
				},
				{
					"name": "keyword.operator.ternary.js",
					"match": ""
				},
				{
					"name": "keyword.operator.expression.infer.js",
					"match": ""
				},
				{
					"name": "keyword.operator.expression.import.js",
					"match": ""
				}
			]
		},
		"type-predicate-operator": {
			"name": "keyword.operator.expression.is.js",
			"match": ""
		},
		"type-name": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "entity.name.type.module.js"
						},
						"2": {
							"name": "punctuation.accessor.js"
						},
						"3": {
							"name": "punctuation.accessor.optional.js"
						}
					}
				},
				{
					"name": "entity.name.type.js",
					"match": ""
				}
			]
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.js",
			"match": ""
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.js",
			"match": ""
		},
		"punctuation-accessor": {
			"match": "",
			"captures": {
				"1": {
					"name": "punctuation.accessor.js"
				},
				"2": {
					"name": "punctuation.accessor.optional.js"
				}
			}
		},
		"string": {
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.js",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.js"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.js"
				},
				"2": {
					"name": "invalid.illegal.newline.js"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"qstring-single": {
			"name": "string.quoted.single.js",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.js"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.js"
				},
				"2": {
					"name": "invalid.illegal.newline.js"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.js",
			"match": ""
		},
		"template": {
			"name": "string.template.js",
			"begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.tagged-template.js"
				},
				"2": {
					"name": "punctuation.definition.string.template.begin.js"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.template.end.js"
				}
			},
			"patterns": [
				{
					"include": "#template-substitution-element"
				},
				{
					"include": "#string-character-escape"
				}
			]
		},
		"template-substitution-element": {
			"name": "meta.template.expression.js",
			"begin": "\\$\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.begin.js"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.template-expression.end.js"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"contentName": "meta.embedded.line.js"
		},
		"regex": {
			"patterns": [
				{
					"name": "string.regexp.js",
					"begin": "(?<!\\+\\+|--)(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimsuy]*(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.js"
						}
					},
					"end": "(/)([gimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.js"
						},
						"2": {
							"name": "keyword.other.js"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "string.regexp.js",
					"begin": "(?<![_$[:alnum:])\\]]|\\+\\+|--)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimsuy]*(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.js"
						}
					},
					"end": "(/)([gimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.js"
						},
						"2": {
							"name": "keyword.other.js"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
		},
		"regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": ""
				},
				{
					"match": "",
					"captures": {
						"0": {
							"name": "keyword.other.back-reference.regexp"
						},
						"1": {
							"name": "variable.other.regexp"
						}
					}
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": ""
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": ""
				},
				{
					"name": "meta.group.assertion.regexp",
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"2": {
							"name": "punctuation.definition.group.assertion.regexp"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						},
						"5": {
							"name": "meta.assertion.look-behind.regexp"
						},
						"6": {
							"name": "meta.assertion.negative-look-behind.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						},
						"2": {
							"name": "variable.other.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": ""
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": ""
				},
				{
					"name": "constant.character.control.regexp",
					"match": ""
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": ""
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.js",
					"begin": "/\\*\\*(?!/)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.js"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.js"
						}
					},
					"patterns": [
						{
							"include": "#docblock"
						}
					]
				},
				{
					"name": "comment.block.js",
					"begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.js"
						},
						"2": {
							"name": "storage.type.internaldeclaration.js"
						},
						"3": {
							"name": "punctuation.decorator.internaldeclaration.js"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.js"
						}
					}
				},
				{
					"begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.js"
						},
						"2": {
							"name": "comment.line.double-slash.js"
						},
						"3": {
							"name": "punctuation.definition.comment.js"
						},
						"4": {
							"name": "storage.type.internaldeclaration.js"
						},
						"5": {
							"name": "punctuation.decorator.internaldeclaration.js"
						}
					},
					"end": "(?=^)",
					"contentName": "comment.line.double-slash.js"
				}
			]
		},
		"directives": {
			"name": "comment.line.triple-slash.directive.js",
			"begin": "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|name)\\s*=\\s*((\\'([^\\'\\\\]|\\\\\\'|\\\\)*\\')|(\\\"([^\\\"\\\\]|\\\\\\\"|\\\\)*\\\")))+\\s*/>\\s*$)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.js"
				}
			},
			"end": "(?=^)",
			"patterns": [
				{
					"name": "meta.tag.js",
					"begin": "(<)(reference|amd-dependency|amd-module)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.directive.js"
						},
						"2": {
							"name": "entity.name.tag.directive.js"
						}
					},
					"end": "/>",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.tag.directive.js"
						}
					},
					"patterns": [
						{
							"name": "entity.other.attribute-name.directive.js",
							"match": ""
						},
						{
							"name": "keyword.operator.assignment.js",
							"match": ""
						},
						{
							"include": "#string"
						}
					]
				}
			]
		},
		"docblock": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "constant.language.access-type.jsdoc"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "entity.name.type.instance.jsdoc"
						},
						"4": {
							"name": "punctuation.definition.bracket.angle.begin.jsdoc"
						},
						"5": {
							"name": "constant.other.email.link.underline.jsdoc"
						},
						"6": {
							"name": "punctuation.definition.bracket.angle.end.jsdoc"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "entity.name.type.instance.jsdoc"
						},
						"4": {
							"name": "keyword.operator.control.jsdoc"
						},
						"5": {
							"name": "entity.name.type.instance.jsdoc"
						}
					}
				},
				{
					"name": "meta.example.jsdoc",
					"begin": "((@)example)\\s+",
					"end": "(?=@|\\*/)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						}
					},
					"patterns": [
						{
							"match": ""
						},
						{
							"contentName": "constant.other.description.jsdoc",
							"begin": "\\G(<)caption(>)",
							"beginCaptures": {
								"0": {
									"name": "entity.name.tag.inline.jsdoc"
								},
								"1": {
									"name": "punctuation.definition.bracket.angle.begin.jsdoc"
								},
								"2": {
									"name": "punctuation.definition.bracket.angle.end.jsdoc"
								}
							},
							"end": "(</)caption(>)|(?=\\*/)",
							"endCaptures": {
								"0": {
									"name": "entity.name.tag.inline.jsdoc"
								},
								"1": {
									"name": "punctuation.definition.bracket.angle.begin.jsdoc"
								},
								"2": {
									"name": "punctuation.definition.bracket.angle.end.jsdoc"
								}
							}
						},
						{
							"match": "",
							"captures": {
								"0": {
									"name": "source.embedded.js"
								}
							}
						}
					]
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "constant.language.symbol-type.jsdoc"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "variable.other.link.underline.jsdoc"
						},
						"4": {
							"name": "entity.name.type.instance.jsdoc"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "variable.other.jsdoc"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "variable.other.jsdoc"
						}
					}
				},
				{
					"begin": "((@)typedef)\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#jsdoctype"
						},
						{
							"name": "entity.name.type.instance.jsdoc",
							"match": ""
						}
					]
				},
				{
					"begin": "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#jsdoctype"
						},
						{
							"name": "variable.other.jsdoc",
							"match": ""
						},
						{
							"name": "variable.other.jsdoc",
							"match": "",
							"captures": {
								"1": {
									"name": "punctuation.definition.optional-value.begin.bracket.square.jsdoc"
								},
								"2": {
									"name": "keyword.operator.assignment.jsdoc"
								},
								"3": {
									"name": "source.embedded.js"
								},
								"4": {
									"name": "punctuation.definition.optional-value.end.bracket.square.jsdoc"
								},
								"5": {
									"name": "invalid.illegal.syntax.jsdoc"
								}
							}
						}
					]
				},
				{
					"begin": "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						}
					},
					"end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
					"patterns": [
						{
							"include": "#jsdoctype"
						}
					]
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "entity.name.type.instance.jsdoc"
						}
					}
				},
				{
					"contentName": "variable.other.jsdoc",
					"begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
					"beginCaptures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "variable.other.jsdoc"
						},
						"4": {
							"name": "punctuation.definition.string.begin.jsdoc"
						}
					},
					"end": "(\\3)|(?=$|\\*/)",
					"endCaptures": {
						"0": {
							"name": "variable.other.jsdoc"
						},
						"1": {
							"name": "punctuation.definition.string.end.jsdoc"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "storage.type.class.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.block.tag.jsdoc"
						},
						"3": {
							"name": "variable.other.jsdoc"
						}
					}
				},
				{
					"name": "storage.type.class.jsdoc",
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.definition.block.tag.jsdoc"
						}
					}
				},
				{
					"include": "#inline-tags"
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"end": "}|(?=\\*/)",
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				},
				{
					"begin": "\\[",
					"end": "\\]|(?=\\*/)",
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				}
			]
		},
		"inline-tags": {
			"patterns": [
				{
					"name": "constant.other.description.jsdoc",
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.definition.bracket.square.begin.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.bracket.square.end.jsdoc"
						}
					}
				},
				{
					"name": "entity.name.type.instance.jsdoc",
					"begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.bracket.curly.begin.jsdoc"
						},
						"2": {
							"name": "storage.type.class.jsdoc"
						},
						"3": {
							"name": "punctuation.definition.inline.tag.jsdoc"
						}
					},
					"end": "}|(?=\\*/)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.end.jsdoc"
						}
					},
					"patterns": [
						{
							"match": "",
							"captures": {
								"1": {
									"name": "variable.other.link.underline.jsdoc"
								},
								"2": {
									"name": "punctuation.separator.pipe.jsdoc"
								}
							}
						},
						{
							"match": "",
							"captures": {
								"1": {
									"name": "variable.other.description.jsdoc"
								},
								"2": {
									"name": "punctuation.separator.pipe.jsdoc"
								}
							}
						}
					]
				}
			]
		},
		"jsdoctype": {
			"patterns": [
				{
					"name": "invalid.illegal.type.jsdoc",
					"match": ""
				},
				{
					"contentName": "entity.name.type.instance.jsdoc",
					"begin": "\\G({)",
					"beginCaptures": {
						"0": {
							"name": "entity.name.type.instance.jsdoc"
						},
						"1": {
							"name": "punctuation.definition.bracket.curly.begin.jsdoc"
						}
					},
					"end": "((}))\\s*|(?=\\*/)",
					"endCaptures": {
						"1": {
							"name": "entity.name.type.instance.jsdoc"
						},
						"2": {
							"name": "punctuation.definition.bracket.curly.end.jsdoc"
						}
					},
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				}
			]
		},
		"jsx": {
			"patterns": [
				{
					"include": "#jsx-tag-without-attributes-in-expression"
				},
				{
					"include": "#jsx-tag-in-expression"
				}
			]
		},
		"jsx-tag-without-attributes-in-expression": {
			"begin": "(?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^)\\s*(?=(<)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>))",
			"end": "(?!(<)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>))",
			"patterns": [
				{
					"include": "#jsx-tag-without-attributes"
				}
			]
		},
		"jsx-tag-without-attributes": {
			"name": "meta.tag.without-attributes.js",
			"begin": "(<)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>)",
			"end": "(</)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.tag.begin.js"
				},
				"2": {
					"name": "entity.name.tag.namespace.js"
				},
				"3": {
					"name": "punctuation.separator.namespace.js"
				},
				"4": {
					"name": "entity.name.tag.js"
				},
				"5": {
					"name": "support.class.component.js"
				},
				"6": {
					"name": "punctuation.definition.tag.end.js"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.begin.js"
				},
				"2": {
					"name": "entity.name.tag.namespace.js"
				},
				"3": {
					"name": "punctuation.separator.namespace.js"
				},
				"4": {
					"name": "entity.name.tag.js"
				},
				"5": {
					"name": "support.class.component.js"
				},
				"6": {
					"name": "punctuation.definition.tag.end.js"
				}
			},
			"contentName": "meta.jsx.children.js",
			"patterns": [
				{
					"include": "#jsx-children"
				}
			]
		},
		"jsx-tag-in-expression": {
			"begin": "(?x)\n  (?<!\\+\\+|--)(?<=[({\\[,?=>:*]|&&|\\|\\||\\?|^return|[^\\._$[:alnum:]]return|^default|[^\\._$[:alnum:]]default|^)\\s*\n  (?!<\\s*[_$[:alpha:]][_$[:alnum:]]*((\\s+extends\\s+[^=>])|,)) # look ahead is not type parameter of arrow\n  (?=(<)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))(?=(<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?!=)\\>)*(?!=)>)?\\s+(?!\\?)|\\/?>))",
			"end": "(?!(<)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))(?=(<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?!=)\\>)*(?!=)>)?\\s+(?!\\?)|\\/?>))",
			"patterns": [
				{
					"include": "#jsx-tag"
				}
			]
		},
		"jsx-tag": {
			"name": "meta.tag.js",
			"begin": "(?=(<)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))(?=(<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?!=)\\>)*(?!=)>)?\\s+(?!\\?)|\\/?>))",
			"end": "(/>)|(?:(</)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))?\\s*(>))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.end.js"
				},
				"2": {
					"name": "punctuation.definition.tag.begin.js"
				},
				"3": {
					"name": "entity.name.tag.namespace.js"
				},
				"4": {
					"name": "punctuation.separator.namespace.js"
				},
				"5": {
					"name": "entity.name.tag.js"
				},
				"6": {
					"name": "support.class.component.js"
				},
				"7": {
					"name": "punctuation.definition.tag.end.js"
				}
			},
			"patterns": [
				{
					"begin": "(<)\\s*(?:([_$a-zA-Z][-$\\w.]*)(?<!\\.|-)(:))?((?:[a-z][a-z0-9]*|([_$a-zA-Z][-$\\w.]*))(?<!\\.|-))(?=(<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>|\\<\\s*([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{[^\\{\\}]*\\}))*\\})|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(\\[([^\\[\\]]|(\\[[^\\[\\]]*\\]))*\\])|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))([^<>\\(]|(\\(([^\\(\\)]|(\\([^\\(\\)]*\\)))*\\))|(?<==)\\>)*(?!=)\\>)*(?!=)>)?\\s+(?!\\?)|\\/?>)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.begin.js"
						},
						"2": {
							"name": "entity.name.tag.namespace.js"
						},
						"3": {
							"name": "punctuation.separator.namespace.js"
						},
						"4": {
							"name": "entity.name.tag.js"
						},
						"5": {
							"name": "support.class.component.js"
						}
					},
					"end": "(?=[/]?>)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#type-arguments"
						},
						{
							"include": "#jsx-tag-attributes"
						}
					]
				},
				{
					"begin": "(>)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.tag.end.js"
						}
					},
					"end": "(?=</)",
					"contentName": "meta.jsx.children.js",
					"patterns": [
						{
							"include": "#jsx-children"
						}
					]
				}
			]
		},
		"jsx-children": {
			"patterns": [
				{
					"include": "#jsx-tag-without-attributes"
				},
				{
					"include": "#jsx-tag"
				},
				{
					"include": "#jsx-evaluated-code"
				},
				{
					"include": "#jsx-entities"
				}
			]
		},
		"jsx-evaluated-code": {
			"name": "meta.embedded.expression.js",
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.embedded.begin.js"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.embedded.end.js"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"jsx-entities": {
			"patterns": [
				{
					"name": "constant.character.entity.js",
					"match": "",
					"captures": {
						"1": {
							"name": "punctuation.definition.entity.js"
						},
						"3": {
							"name": "punctuation.definition.entity.js"
						}
					}
				},
				{
					"name": "invalid.illegal.bad-ampersand.js",
					"match": ""
				}
			]
		},
		"jsx-tag-attributes": {
			"name": "meta.tag.attributes.js",
			"begin": "\\s+",
			"end": "(?=[/]?>)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#jsx-tag-attribute-name"
				},
				{
					"include": "#jsx-tag-attribute-assignment"
				},
				{
					"include": "#jsx-string-double-quoted"
				},
				{
					"include": "#jsx-string-single-quoted"
				},
				{
					"include": "#jsx-evaluated-code"
				},
				{
					"include": "#jsx-tag-attributes-illegal"
				}
			]
		},
		"jsx-tag-attribute-name": {
			"match": "",
			"captures": {
				"1": {
					"name": "entity.other.attribute-name.namespace.js"
				},
				"2": {
					"name": "punctuation.separator.namespace.js"
				},
				"3": {
					"name": "entity.other.attribute-name.js"
				}
			}
		},
		"jsx-tag-attribute-assignment": {
			"name": "keyword.operator.assignment.js",
			"match": ""
		},
		"jsx-string-double-quoted": {
			"name": "string.quoted.double.js",
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.js"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.js"
				}
			},
			"patterns": [
				{
					"include": "#jsx-entities"
				}
			]
		},
		"jsx-string-single-quoted": {
			"name": "string.quoted.single.js",
			"begin": "'",
			"end": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.js"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.js"
				}
			},
			"patterns": [
				{
					"include": "#jsx-entities"
				}
			]
		},
		"jsx-tag-attributes-illegal": {
			"name": "invalid.illegal.attribute.js",
			"match": ""
		}
	}
}