{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-c/blob/master/grammars/c.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-c/commit/9c0c5f202741a5647025db8d5df5fefba47b036c",
	"name": "C",
	"scopeName": "source.c",
	"patterns": [
		{
			"include": "#preprocessor-rule-enabled"
		},
		{
			"include": "#preprocessor-rule-disabled"
		},
		{
			"include": "#preprocessor-rule-conditional"
		},
		{
			"include": "#comments"
		},
		{
			"match": "",
			"name": "keyword.control.c"
		},
		{
			"include": "#storage_types"
		},
		{
			"match": "",
			"name": "storage.modifier.c"
		},
		{
			"match": "",
			"name": "constant.other.variable.mac-classic.c"
		},
		{
			"match": "",
			"name": "variable.other.readwrite.global.mac-classic.c"
		},
		{
			"match": "",
			"name": "variable.other.readwrite.static.mac-classic.c"
		},
		{
			"match": "",
			"name": "constant.language.c"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"begin": "(?x)\n^\\s* ((\\#)\\s*define) \\s+    # define\n((?<id>[a-zA-Z_$][\\w$]*))      # macro name\n(?:\n  (\\()\n    (\n      \\s* \\g<id> \\s*         # first argument\n      ((,) \\s* \\g<id> \\s*)*  # additional arguments\n      (?:\\.\\.\\.)?            # varargs ellipsis?\n    )\n  (\\))\n)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.define.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				},
				"3": {
					"name": "entity.name.function.preprocessor.c"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.c"
				},
				"6": {
					"name": "variable.parameter.preprocessor.c"
				},
				"8": {
					"name": "punctuation.separator.parameters.c"
				},
				"9": {
					"name": "punctuation.definition.parameters.end.c"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.macro.c",
			"patterns": [
				{
					"include": "#preprocessor-rule-define-line-contents"
				}
			]
		},
		{
			"begin": "^\\s*((#)\\s*(error|warning))\\b",
			"captures": {
				"1": {
					"name": "keyword.control.directive.diagnostic.$3.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?<!\\\\)(?=\\n)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))",
			"name": "meta.preprocessor.diagnostic.c",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.$3.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.include.c",
			"patterns": [
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.double.include.c"
				},
				{
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.other.lt-gt.include.c"
				}
			]
		},
		{
			"include": "#pragma-mark"
		},
		{
			"begin": "^\\s*((#)\\s*line)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.line.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.c",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"begin": "^\\s*(?:((#)\\s*undef))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.undef.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.c",
			"patterns": [
				{
					"match": "",
					"name": "entity.name.function.preprocessor.c"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"begin": "^\\s*(?:((#)\\s*pragma))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.pragma.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.pragma.c",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"match": "",
					"name": "entity.other.attribute-name.pragma.preprocessor.c"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"match": "",
			"name": "support.type.sys-types.c"
		},
		{
			"match": "",
			"name": "support.type.pthread.c"
		},
		{
			"match": "",
			"name": "support.type.stdint.c"
		},
		{
			"match": "",
			"name": "support.constant.mac-classic.c"
		},
		{
			"match": "",
			"name": "support.type.mac-classic.c"
		},
		{
			"match": "",
			"name": "support.type.posix-reserved.c"
		},
		{
			"include": "#block"
		},
		{
			"include": "#parens"
		},
		{
			"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
			"end": "(?<=\\))(?!\\w)",
			"name": "meta.function.c",
			"patterns": [
				{
					"include": "#function-innards"
				}
			]
		},
		{
			"include": "#line_continuation_character"
		},
		{
			"match": "",
			"captures": {
				"1": {
					"name": "punctuation.definition.begin.bracket.square.c"
				},
				"2": {
					"name": "punctuation.definition.end.bracket.square.c"
				}
			}
		},
		{
			"match": "",
			"name": "punctuation.terminator.statement.c"
		},
		{
			"match": "",
			"name": "punctuation.separator.delimiter.c"
		}
	],
	"repository": {
		"access": {
			"captures": {
				"2": {
					"name": "punctuation.separator.dot-access.c"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.c"
				},
				"4": {
					"name": "variable.other.member.c"
				}
			},
			"match": ""
		},
		"block": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.c"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.c"
						}
					},
					"name": "meta.block.c",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#preprocessor-rule-enabled-block"
				},
				{
					"include": "#preprocessor-rule-disabled-block"
				},
				{
					"include": "#preprocessor-rule-conditional-block"
				},
				{
					"include": "#access"
				},
				{
					"include": "#libc"
				},
				{
					"include": "#c_function_call"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.c"
						},
						"2": {
							"name": "punctuation.definition.parameters.c"
						}
					},
					"match": "",
					"name": "meta.initialization.c"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.c"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.c"
						}
					},
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"include": "#parens-block"
				},
				{
					"include": "$base"
				}
			]
		},
		"c_function_call": {
			"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
			"end": "(?<=\\))(?!\\w)",
			"name": "meta.function-call.c",
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.c"
						}
					},
					"match": "",
					"name": "comment.block.c"
				},
				{
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.c"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.c"
						}
					},
					"name": "comment.block.c"
				},
				{
					"match": "",
					"name": "invalid.illegal.stray-comment-end.c"
				},
				{
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.line.c"
						}
					},
					"match": "",
					"name": "comment.line.banner.cpp"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cpp"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cpp"
								}
							},
							"end": "(?=\\n)",
							"name": "comment.line.double-slash.cpp",
							"patterns": [
								{
									"include": "#line_continuation_character"
								}
							]
						}
					]
				}
			]
		},
		"disabled": {
			"begin": "^\\s*#\\s*if(n?def)?\\b.*$",
			"end": "^\\s*#\\s*endif\\b",
			"patterns": [
				{
					"include": "#disabled"
				},
				{
					"include": "#pragma-mark"
				}
			]
		},
		"libc": {
			"captures": {
				"1": {
					"name": "punctuation.whitespace.support.function.leading.c"
				},
				"2": {
					"name": "support.function.C99.c"
				}
			},
			"match": ""
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.c"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "",
					"name": "constant.numeric.c"
				}
			]
		},
		"parens": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.c"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.c"
				}
			},
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"parens-block": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.c"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.c"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		"pragma-mark": {
			"captures": {
				"1": {
					"name": "meta.preprocessor.pragma.c"
				},
				"2": {
					"name": "keyword.control.directive.pragma.pragma-mark.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				},
				"4": {
					"name": "entity.name.tag.pragma-mark.c"
				}
			},
			"match": "",
			"name": "meta.section"
		},
		"operators": {
			"patterns": [
				{
					"match": "",
					"name": "keyword.operator.sizeof.c"
				},
				{
					"match": "",
					"name": "keyword.operator.decrement.c"
				},
				{
					"match": "",
					"name": "keyword.operator.increment.c"
				},
				{
					"match": "",
					"name": "keyword.operator.assignment.compound.c"
				},
				{
					"match": "",
					"name": "keyword.operator.assignment.compound.bitwise.c"
				},
				{
					"match": "",
					"name": "keyword.operator.bitwise.shift.c"
				},
				{
					"match": "",
					"name": "keyword.operator.comparison.c"
				},
				{
					"match": "",
					"name": "keyword.operator.logical.c"
				},
				{
					"match": "",
					"name": "keyword.operator.c"
				},
				{
					"match": "",
					"name": "keyword.operator.assignment.c"
				},
				{
					"match": "",
					"name": "keyword.operator.c"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.c"
						}
					},
					"end": ":",
					"applyEndPatternLast": true,
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.c"
						}
					},
					"patterns": [
						{
							"include": "#access"
						},
						{
							"include": "#libc"
						},
						{
							"include": "#c_function_call"
						},
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.double.c",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.single.c",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.c"
				},
				{
					"match": "",
					"name": "invalid.illegal.unknown-escape.c"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "",
					"name": "constant.other.placeholder.c"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "invalid.illegal.placeholder.c"
						}
					}
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "",
					"name": "storage.type.c"
				}
			]
		},
		"vararg_ellipses": {
			"match": "",
			"name": "punctuation.vararg-ellipses.c"
		},
		"preprocessor-rule-conditional": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#preprocessor-rule-enabled-elif"
						},
						{
							"include": "#preprocessor-rule-enabled-else"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"match": "",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.c"
						}
					}
				}
			]
		},
		"preprocessor-rule-conditional-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"match": "",
					"captures": {
						"0": {
							"name": "invalid.illegal.stray-$1.c"
						}
					}
				}
			]
		},
		"preprocessor-rule-conditional-line": {
			"patterns": [
				{
					"match": "",
					"name": "keyword.control.directive.conditional.c"
				},
				{
					"match": "",
					"name": "invalid.illegal.macro-name.c"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.c"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.c"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#operators"
				},
				{
					"match": "",
					"name": "constant.language.c"
				},
				{
					"match": "",
					"name": "entity.name.function.preprocessor.c"
				},
				{
					"include": "#line_continuation_character"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.c"
						}
					},
					"end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#preprocessor-rule-enabled-elif"
						},
						{
							"include": "#preprocessor-rule-enabled-else"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.preprocessor.c",
									"patterns": [
										{
											"include": "#preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"include": "#preprocessor-rule-enabled-elif-block"
						},
						{
							"include": "#preprocessor-rule-enabled-else-block"
						},
						{
							"include": "#preprocessor-rule-disabled-elif"
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
							"patterns": [
								{
									"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
									"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
									"name": "meta.preprocessor.c",
									"patterns": [
										{
											"include": "#preprocessor-rule-conditional-line"
										}
									]
								},
								{
									"include": "#block_innards"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.in-block.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.c"
				},
				"1": {
					"name": "keyword.control.directive.conditional.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.c",
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
					"contentName": "comment.block.preprocessor.elif-branch.c",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						},
						"3": {
							"name": "constant.numeric.preprocessor.c"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.else-branch.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "$base"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-block": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"end": "^\\s*((#)\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.c"
						},
						"1": {
							"name": "keyword.control.directive.conditional.c"
						},
						"2": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
							"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
							"name": "meta.preprocessor.c",
							"patterns": [
								{
									"include": "#preprocessor-rule-conditional-line"
								}
							]
						},
						{
							"include": "#comments"
						},
						{
							"begin": "^\\s*((#)\\s*else\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.else-branch.in-block.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*elif\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.if-branch.in-block.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "\\n",
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"patterns": [
								{
									"include": "#block_innards"
								}
							]
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-elif": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.c"
				},
				"1": {
					"name": "keyword.control.directive.conditional.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.c",
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-elif-block": {
			"begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.c"
				},
				"1": {
					"name": "keyword.control.directive.conditional.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
					"end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.c",
					"patterns": [
						{
							"include": "#preprocessor-rule-conditional-line"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\n",
					"end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
					"patterns": [
						{
							"begin": "^\\s*((#)\\s*(else)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*endif\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.in-block.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"begin": "^\\s*((#)\\s*(elif)\\b)",
							"beginCaptures": {
								"0": {
									"name": "meta.preprocessor.c"
								},
								"1": {
									"name": "keyword.control.directive.conditional.c"
								},
								"2": {
									"name": "punctuation.definition.directive.c"
								}
							},
							"end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
							"contentName": "comment.block.preprocessor.elif-branch.c",
							"patterns": [
								{
									"include": "#disabled"
								},
								{
									"include": "#pragma-mark"
								}
							]
						},
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-else": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.c"
				},
				"1": {
					"name": "keyword.control.directive.conditional.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"preprocessor-rule-enabled-else-block": {
			"begin": "^\\s*((#)\\s*else\\b)",
			"beginCaptures": {
				"0": {
					"name": "meta.preprocessor.c"
				},
				"1": {
					"name": "keyword.control.directive.conditional.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=^\\s*((#)\\s*endif\\b))",
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		"preprocessor-rule-define-line-contents": {
			"patterns": [
				{
					"include": "#vararg_ellipses"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.c"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.c"
						}
					},
					"name": "meta.block.c",
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-blocks"
						}
					]
				},
				{
					"match": "",
					"name": "punctuation.section.parens.begin.bracket.round.c"
				},
				{
					"match": "",
					"name": "punctuation.section.parens.end.bracket.round.c"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
					"end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
					"name": "meta.function.c",
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": "\"|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.double.c",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.c"
						}
					},
					"end": "'|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.c"
						}
					},
					"name": "string.quoted.single.c",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"include": "#access"
				},
				{
					"include": "#libc"
				},
				{
					"include": "$base"
				}
			]
		},
		"preprocessor-rule-define-line-blocks": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.c"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.c"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-blocks"
						},
						{
							"include": "#preprocessor-rule-define-line-contents"
						}
					]
				},
				{
					"include": "#preprocessor-rule-define-line-contents"
				}
			]
		},
		"preprocessor-rule-define-line-functions": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"include": "#access"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.c"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.c"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.arguments.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.c"
						}
					},
					"end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.parens.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-rule-define-line-functions"
						}
					]
				},
				{
					"include": "#preprocessor-rule-define-line-contents"
				}
			]
		},
		"function-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.c"
						},
						"2": {
							"name": "punctuation.section.parameters.begin.bracket.round.c"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parameters.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.c"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"include": "$base"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#access"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.c"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.c"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.c"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.c"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#block_innards"
				}
			]
		}
	}
}