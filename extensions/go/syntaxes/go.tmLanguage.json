{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-go/blob/master/grammars/go.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-go/commit/b6fd68f74efa109679e31fe6f4a41ac105262d0e",
	"name": "Go",
	"scopeName": "source.go",
	"comment": "Go language",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"comment": "Interpreted string literals",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.go"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.go"
				}
			},
			"name": "string.quoted.double.go",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Raw string literals",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.go"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.go"
				}
			},
			"name": "string.quoted.raw.go",
			"patterns": [
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Syntax error receiving channels",
			"match": "",
			"captures": {
				"1": {
					"name": "invalid.illegal.receive-channel.go"
				}
			}
		},
		{
			"comment": "Syntax error sending channels",
			"match": "",
			"captures": {
				"1": {
					"name": "invalid.illegal.send-channel.go"
				}
			}
		},
		{
			"comment": "Syntax error using slices",
			"match": "",
			"captures": {
				"1": {
					"name": "invalid.illegal.slice.go"
				}
			}
		},
		{
			"comment": "Syntax error numeric literals",
			"match": "",
			"name": "invalid.illegal.numeric.go"
		},
		{
			"comment": "Built-in functions",
			"match": "",
			"name": "support.function.builtin.go"
		},
		{
			"comment": "Function declarations",
			"match": "",
			"captures": {
				"1": {
					"name": "keyword.function.go"
				},
				"2": {
					"patterns": [
						{
							"include": "#brackets"
						},
						{
							"include": "#operators"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "",
							"name": "invalid.illegal.identifier.go"
						},
						{
							"match": "",
							"name": "entity.name.function.go"
						}
					]
				}
			}
		},
		{
			"comment": "Functions",
			"match": "",
			"captures": {
				"1": {
					"name": "keyword.function.go"
				},
				"2": {
					"patterns": [
						{
							"match": "",
							"name": "invalid.illegal.identifier.go"
						},
						{
							"match": "",
							"name": "support.function.go"
						}
					]
				}
			}
		},
		{
			"comment": "Floating-point literals",
			"match": "",
			"name": "constant.numeric.floating-point.go"
		},
		{
			"comment": "Integers",
			"match": "",
			"name": "constant.numeric.integer.go"
		},
		{
			"comment": "Language constants",
			"match": "",
			"name": "constant.language.go"
		},
		{
			"begin": "\\b(package)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.package.go"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "",
					"name": "invalid.illegal.identifier.go"
				},
				{
					"match": "",
					"name": "entity.name.package.go"
				}
			]
		},
		{
			"begin": "\\b(type)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.type.go"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "",
					"name": "invalid.illegal.identifier.go"
				},
				{
					"match": "",
					"name": "entity.name.type.go"
				}
			]
		},
		{
			"begin": "\\b(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.go"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#imports"
				}
			]
		},
		{
			"begin": "\\b(var)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.var.go"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#variables"
				}
			]
		},
		{
			"match": "",
			"captures": {
				"1": {
					"patterns": [
						{
							"match": "",
							"name": "invalid.illegal.identifier.go"
						},
						{
							"match": "",
							"name": "variable.other.assignment.go",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#delimiters"
										}
									]
								}
							}
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"match": "",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "",
							"name": "invalid.illegal.identifier.go"
						},
						{
							"match": "",
							"name": "variable.other.assignment.go"
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"comment": "Terminators",
			"match": "",
			"name": "punctuation.terminator.go"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#storage_types"
		}
	],
	"repository": {
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.go"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.go"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.go"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.go"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "",
					"name": "punctuation.definition.bracket.square.go"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.go"
						}
					},
					"name": "comment.block.go"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.go"
						}
					},
					"end": "$",
					"name": "comment.line.double-slash.go"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": "",
					"name": "punctuation.other.comma.go"
				},
				{
					"match": "",
					"name": "punctuation.other.period.go"
				},
				{
					"match": "",
					"name": "punctuation.other.colon.go"
				}
			]
		},
		"imports": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "entity.alias.import.go"
						},
						"2": {
							"name": "string.quoted.double.go"
						},
						"3": {
							"name": "punctuation.definition.string.begin.go"
						},
						"4": {
							"name": "entity.name.import.go"
						},
						"5": {
							"name": "punctuation.definition.string.end.go"
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.imports.begin.bracket.round.go"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.imports.end.bracket.round.go"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#imports"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Flow control keywords",
					"match": "",
					"name": "keyword.control.go"
				},
				{
					"match": "",
					"name": "keyword.channel.go"
				},
				{
					"match": "",
					"name": "keyword.const.go"
				},
				{
					"match": "",
					"name": "keyword.function.go"
				},
				{
					"match": "",
					"name": "keyword.interface.go"
				},
				{
					"match": "",
					"name": "keyword.map.go"
				},
				{
					"match": "",
					"name": "keyword.struct.go"
				}
			]
		},
		"operators": {
			"comment": "Note that the order here is very important!",
			"patterns": [
				{
					"match": "",
					"name": "keyword.operator.address.go"
				},
				{
					"match": "",
					"name": "keyword.operator.channel.go"
				},
				{
					"match": "",
					"name": "keyword.operator.decrement.go"
				},
				{
					"match": "",
					"name": "keyword.operator.increment.go"
				},
				{
					"match": "",
					"name": "keyword.operator.comparison.go"
				},
				{
					"match": "",
					"name": "keyword.operator.logical.go"
				},
				{
					"match": "",
					"name": "keyword.operator.assignment.go"
				},
				{
					"match": "",
					"name": "keyword.operator.arithmetic.go"
				},
				{
					"match": "",
					"name": "keyword.operator.arithmetic.bitwise.go"
				},
				{
					"match": "",
					"name": "keyword.operator.ellipsis.go"
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.go"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.go"
						}
					},
					"name": "string.quoted.rune.go",
					"patterns": [
						{
							"match": "",
							"name": "constant.other.rune.go"
						},
						{
							"match": "",
							"name": "invalid.illegal.unknown-rune.go"
						}
					]
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "",
					"name": "storage.type.boolean.go"
				},
				{
					"match": "",
					"name": "storage.type.byte.go"
				},
				{
					"match": "",
					"name": "storage.type.error.go"
				},
				{
					"match": "",
					"name": "storage.type.numeric.go"
				},
				{
					"match": "",
					"name": "storage.type.rune.go"
				},
				{
					"match": "",
					"name": "storage.type.string.go"
				},
				{
					"match": "",
					"name": "storage.type.uintptr.go"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.go"
				},
				{
					"match": "",
					"name": "invalid.illegal.unknown-escape.go"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "",
					"name": "constant.other.placeholder.go"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "",
									"name": "invalid.illegal.identifier.go"
								},
								{
									"match": "",
									"name": "variable.other.assignment.go"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "",
									"name": "invalid.illegal.identifier.go"
								},
								{
									"match": "",
									"name": "variable.other.declaration.go"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.variables.begin.bracket.round.go"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variables.end.bracket.round.go"
						}
					},
					"patterns": [
						{
							"include": "$self"
						},
						{
							"include": "#variables"
						}
					]
				}
			]
		}
	}
}