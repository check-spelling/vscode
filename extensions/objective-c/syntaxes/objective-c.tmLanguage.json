{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-objective-c/blob/master/grammars/objective-c.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-objective-c/commit/0727e04544f3414c1c339cf15a39a05ea3938cb4",
	"name": "Objective-C",
	"scopeName": "source.objc",
	"patterns": [
		{
			"begin": "((@)(interface|protocol))(?!.+;)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*((:)(?:\\s*)([A-Za-z][A-Za-z0-9]*))?(\\s|\\n)?",
			"captures": {
				"1": {
					"name": "storage.type.objc"
				},
				"2": {
					"name": "punctuation.definition.storage.type.objc"
				},
				"4": {
					"name": "entity.name.type.objc"
				},
				"6": {
					"name": "punctuation.definition.entity.other.inherited-class.objc"
				},
				"7": {
					"name": "entity.other.inherited-class.objc"
				},
				"8": {
					"name": "meta.divider.objc"
				},
				"9": {
					"name": "meta.inherited-class.objc"
				}
			},
			"contentName": "meta.scope.interface.objc",
			"end": "((@)end)\\b",
			"name": "meta.interface-or-protocol.objc",
			"patterns": [
				{
					"include": "#interface_innards"
				}
			]
		},
		{
			"begin": "((@)(implementation))\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*(?::\\s*([A-Za-z][A-Za-z0-9]*))?",
			"captures": {
				"1": {
					"name": "storage.type.objc"
				},
				"2": {
					"name": "punctuation.definition.storage.type.objc"
				},
				"4": {
					"name": "entity.name.type.objc"
				},
				"5": {
					"name": "entity.other.inherited-class.objc"
				}
			},
			"contentName": "meta.scope.implementation.objc",
			"end": "((@)end)\\b",
			"name": "meta.implementation.objc",
			"patterns": [
				{
					"include": "#implementation_innards"
				}
			]
		},
		{
			"begin": "@\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.objc"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.objc"
				}
			},
			"name": "string.quoted.double.objc",
			"patterns": [
				{
					"include": "source.c#string_escaped_char"
				},
				{
					"match": "",
					"name": "constant.other.placeholder.objc"
				},
				{
					"include": "source.c#string_placeholder"
				}
			]
		},
		{
			"begin": "\\b(id)\\s*(?=<)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.objc"
				}
			},
			"end": "(?<=>)",
			"name": "meta.id-with-protocol.objc",
			"patterns": [
				{
					"include": "#protocol_list"
				}
			]
		},
		{
			"match": "",
			"name": "keyword.control.macro.objc"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.keyword.objc"
				}
			},
			"match": "",
			"name": "keyword.control.exception.objc"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.keyword.objc"
				}
			},
			"match": "",
			"name": "keyword.control.synchronize.objc"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.keyword.objc"
				}
			},
			"match": "",
			"name": "keyword.control.protocol-specification.objc"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.keyword.objc"
				}
			},
			"match": "",
			"name": "keyword.other.objc"
		},
		{
			"match": "",
			"name": "storage.type.id.objc"
		},
		{
			"match": "",
			"name": "storage.type.objc"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.storage.type.objc"
				}
			},
			"match": "",
			"name": "storage.type.objc"
		},
		{
			"begin": "((@)selector)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.type.objc"
				},
				"2": {
					"name": "punctuation.definition.storage.type.objc"
				},
				"3": {
					"name": "punctuation.definition.storage.type.objc"
				}
			},
			"contentName": "meta.selector.method-name.objc",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.storage.type.objc"
				}
			},
			"name": "meta.selector.objc",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "punctuation.separator.arguments.objc"
						}
					},
					"match": "",
					"name": "support.function.any-method.name-of-parameter.objc"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.storage.modifier.objc"
				}
			},
			"match": "",
			"name": "storage.modifier.objc"
		},
		{
			"match": "",
			"name": "constant.language.objc"
		},
		{
			"match": "",
			"name": "support.variable.foundation"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.whitespace.support.function.cocoa.leopard"
				},
				"2": {
					"name": "support.function.cocoa.leopard"
				}
			},
			"match": ""
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.whitespace.support.function.leading.cocoa"
				},
				"2": {
					"name": "support.function.cocoa"
				}
			},
			"match": ""
		},
		{
			"match": "",
			"name": "support.class.cocoa.leopard"
		},
		{
			"match": "",
			"name": "support.class.cocoa"
		},
		{
			"match": "",
			"name": "support.type.cocoa.leopard"
		},
		{
			"match": "",
			"name": "support.class.quartz"
		},
		{
			"match": "",
			"name": "support.type.quartz"
		},
		{
			"match": "",
			"name": "support.type.cocoa"
		},
		{
			"match": "",
			"name": "support.constant.cocoa"
		},
		{
			"match": "",
			"name": "support.constant.notification.cocoa.leopard"
		},
		{
			"match": "",
			"name": "support.constant.notification.cocoa"
		},
		{
			"match": "",
			"name": "support.constant.cocoa.leopard"
		},
		{
			"match": "",
			"name": "support.constant.cocoa"
		},
		{
			"include": "source.c"
		},
		{
			"include": "#bracketed_content"
		}
	],
	"repository": {
		"bracketed_content": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.scope.begin.objc"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.scope.end.objc"
				}
			},
			"name": "meta.bracketed.objc",
			"patterns": [
				{
					"begin": "(?=predicateWithFormat:)(?<=NSPredicate )(predicateWithFormat:)",
					"beginCaptures": {
						"1": {
							"name": "support.function.any-method.objc"
						},
						"2": {
							"name": "punctuation.separator.arguments.objc"
						}
					},
					"end": "(?=\\])",
					"name": "meta.function-call.predicate.objc",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "punctuation.separator.arguments.objc"
								}
							},
							"match": "",
							"name": "support.function.any-method.name-of-parameter.objc"
						},
						{
							"captures": {
								"1": {
									"name": "punctuation.separator.arguments.objc"
								}
							},
							"match": "",
							"name": "invalid.illegal.unknown-method.objc"
						},
						{
							"begin": "@\"",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.string.begin.objc"
								}
							},
							"end": "\"",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.string.end.objc"
								}
							},
							"name": "string.quoted.double.objc",
							"patterns": [
								{
									"match": "",
									"name": "keyword.operator.logical.predicate.cocoa"
								},
								{
									"match": "",
									"name": "constant.language.predicate.cocoa"
								},
								{
									"match": "",
									"name": "constant.language.predicate.cocoa"
								},
								{
									"match": "",
									"name": "keyword.operator.comparison.predicate.cocoa"
								},
								{
									"match": "",
									"name": "keyword.other.modifier.predicate.cocoa"
								},
								{
									"match": "",
									"name": "keyword.other.predicate.cocoa"
								},
								{
									"match": "",
									"name": "constant.character.escape.objc"
								},
								{
									"match": "",
									"name": "invalid.illegal.unknown-escape.objc"
								}
							]
						},
						{
							"include": "#special_variables"
						},
						{
							"include": "#c_functions"
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "(?=\\w)(?<=[\\w\\])\"] )(\\w+(?:(:)|(?=\\])))",
					"beginCaptures": {
						"1": {
							"name": "support.function.any-method.objc"
						},
						"2": {
							"name": "punctuation.separator.arguments.objc"
						}
					},
					"end": "(?=\\])",
					"name": "meta.function-call.objc",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "punctuation.separator.arguments.objc"
								}
							},
							"match": "",
							"name": "support.function.any-method.name-of-parameter.objc"
						},
						{
							"include": "#special_variables"
						},
						{
							"include": "#c_functions"
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"include": "#special_variables"
				},
				{
					"include": "#c_functions"
				},
				{
					"include": "$self"
				}
			]
		},
		"c_functions": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "punctuation.whitespace.support.function.leading.c"
						},
						"2": {
							"name": "support.function.C99.c"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.whitespace.function-call.leading.c"
						},
						"2": {
							"name": "support.function.any-method.c"
						},
						"3": {
							"name": "punctuation.definition.parameters.c"
						}
					},
					"match": "",
					"name": "meta.function-call.c"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.objc"
						}
					},
					"end": "\\*/",
					"name": "comment.block.objc"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.objc"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.objc"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-slash.objc",
							"patterns": [
								{
									"match": "",
									"name": "punctuation.separator.continuation.objc"
								}
							]
						}
					]
				}
			]
		},
		"disabled": {
			"begin": "^\\s*#\\s*if(n?def)?\\b.*$",
			"comment": "eat nested preprocessor if(def)s",
			"end": "^\\s*#\\s*endif\\b.*$",
			"patterns": [
				{
					"include": "#disabled"
				},
				{
					"include": "#pragma-mark"
				}
			]
		},
		"implementation_innards": {
			"patterns": [
				{
					"include": "#preprocessor-rule-enabled-implementation"
				},
				{
					"include": "#preprocessor-rule-disabled-implementation"
				},
				{
					"include": "#preprocessor-rule-other-implementation"
				},
				{
					"include": "#property_directive"
				},
				{
					"include": "#special_variables"
				},
				{
					"include": "#method_super"
				},
				{
					"include": "$base"
				}
			]
		},
		"interface_innards": {
			"patterns": [
				{
					"include": "#preprocessor-rule-enabled-interface"
				},
				{
					"include": "#preprocessor-rule-disabled-interface"
				},
				{
					"include": "#preprocessor-rule-other-interface"
				},
				{
					"include": "#properties"
				},
				{
					"include": "#protocol_list"
				},
				{
					"include": "#method"
				},
				{
					"include": "$base"
				}
			]
		},
		"method": {
			"begin": "^(-|\\+)\\s*",
			"end": "(?=\\{|#)|;",
			"name": "meta.function.objc",
			"patterns": [
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.type.begin.objc"
						}
					},
					"end": "(\\))\\s*(\\w+\\b)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.type.end.objc"
						},
						"2": {
							"name": "entity.name.function.objc"
						}
					},
					"name": "meta.return-type.objc",
					"patterns": [
						{
							"include": "#protocol_list"
						},
						{
							"include": "#protocol_type_qualifier"
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"match": "",
					"name": "entity.name.function.name-of-parameter.objc"
				},
				{
					"begin": "((:))\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.name-of-parameter.objc"
						},
						"2": {
							"name": "punctuation.separator.arguments.objc"
						},
						"3": {
							"name": "punctuation.definition.type.begin.objc"
						}
					},
					"end": "(\\))\\s*(\\w+\\b)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.type.end.objc"
						},
						"2": {
							"name": "variable.parameter.function.objc"
						}
					},
					"name": "meta.argument-type.objc",
					"patterns": [
						{
							"include": "#protocol_list"
						},
						{
							"include": "#protocol_type_qualifier"
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"include": "#comment"
				}
			]
		},
		"method_super": {
			"begin": "^(?=-|\\+)",
			"end": "(?<=\\})|(?=#)",
			"name": "meta.function-with-body.objc",
			"patterns": [
				{
					"include": "#method"
				},
				{
					"include": "$base"
				}
			]
		},
		"pragma-mark": {
			"captures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.import.pragma.c"
				},
				"3": {
					"name": "meta.toc-list.pragma-mark.c"
				}
			},
			"match": "",
			"name": "meta.section"
		},
		"preprocessor-rule-disabled-implementation": {
			"begin": "^\\s*(#(if)\\s+(0)\\b).*",
			"captures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.import.if.c"
				},
				"3": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
			"patterns": [
				{
					"begin": "^\\s*(#\\s*(else)\\b)",
					"captures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.import.else.c"
						}
					},
					"end": "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
					"patterns": [
						{
							"include": "#interface_innards"
						}
					]
				},
				{
					"begin": "",
					"end": "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
					"name": "comment.block.preprocessor.if-branch.c",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled-interface": {
			"begin": "^\\s*(#(if)\\s+(0)\\b).*",
			"captures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.import.if.c"
				},
				"3": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
			"patterns": [
				{
					"begin": "^\\s*(#\\s*(else)\\b)",
					"captures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.import.else.c"
						}
					},
					"end": "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
					"patterns": [
						{
							"include": "#interface_innards"
						}
					]
				},
				{
					"begin": "",
					"end": "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
					"name": "comment.block.preprocessor.if-branch.c",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-implementation": {
			"begin": "^\\s*(#(if)\\s+(0*1)\\b)",
			"captures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.import.if.c"
				},
				"3": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
			"patterns": [
				{
					"begin": "^\\s*(#\\s*(else)\\b).*",
					"captures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.import.else.c"
						}
					},
					"contentName": "comment.block.preprocessor.else-branch.c",
					"end": "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				},
				{
					"begin": "",
					"end": "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
					"patterns": [
						{
							"include": "#implementation_innards"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-interface": {
			"begin": "^\\s*(#(if)\\s+(0*1)\\b)",
			"captures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.import.if.c"
				},
				"3": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
			"patterns": [
				{
					"begin": "^\\s*(#\\s*(else)\\b).*",
					"captures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.import.else.c"
						}
					},
					"contentName": "comment.block.preprocessor.else-branch.c",
					"end": "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				},
				{
					"begin": "",
					"end": "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
					"patterns": [
						{
							"include": "#interface_innards"
						}
					]
				}
			]
		},
		"preprocessor-rule-other-implementation": {
			"begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
			"captures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.import.c"
				}
			},
			"end": "^\\s*(#\\s*(endif)\\b).*?(?:(?=(?://|/\\*))|$)",
			"patterns": [
				{
					"include": "#implementation_innards"
				}
			]
		},
		"preprocessor-rule-other-interface": {
			"begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
			"captures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.import.c"
				}
			},
			"end": "^\\s*(#\\s*(endif)\\b).*?(?:(?=(?://|/\\*))|$)",
			"patterns": [
				{
					"include": "#interface_innards"
				}
			]
		},
		"properties": {
			"patterns": [
				{
					"begin": "((@)property)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.property.objc"
						},
						"2": {
							"name": "punctuation.definition.keyword.objc"
						},
						"3": {
							"name": "punctuation.section.scope.begin.objc"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.scope.end.objc"
						}
					},
					"name": "meta.property-with-attributes.objc",
					"patterns": [
						{
							"match": "",
							"name": "keyword.other.property.attribute"
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.property.objc"
						},
						"2": {
							"name": "punctuation.definition.keyword.objc"
						}
					},
					"match": "",
					"name": "meta.property.objc"
				}
			]
		},
		"property_directive": {
			"captures": {
				"1": {
					"name": "punctuation.definition.keyword.objc"
				}
			},
			"match": "",
			"name": "keyword.other.property.directive.objc"
		},
		"protocol_list": {
			"begin": "(<)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.scope.begin.objc"
				}
			},
			"end": "(>)",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.scope.end.objc"
				}
			},
			"name": "meta.protocol-list.objc",
			"patterns": [
				{
					"match": "",
					"name": "support.other.protocol.objc"
				}
			]
		},
		"protocol_type_qualifier": {
			"match": "",
			"name": "storage.modifier.protocol.objc"
		},
		"special_variables": {
			"patterns": [
				{
					"match": "",
					"name": "variable.other.selector.objc"
				},
				{
					"match": "",
					"name": "variable.language.objc"
				}
			]
		}
	}
}