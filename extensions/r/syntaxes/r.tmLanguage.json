{
	"information_for_contributors": [
		"This file has been converted from https://github.com/Ikuyadeu/vscode-R/blob/master/syntax/r.json",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/Ikuyadeu/vscode-R/commit/b3ef459a3999160d97ea28f4754fda810417f99f",
	"name": "R",
	"scopeName": "source.r",
	"patterns": [
		{
			"include": "#roxygen"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#storage-type"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#function-declarations"
		},
		{
			"include": "#lambda-functions"
		},
		{
			"include": "#builtin-functions"
		},
		{
			"include": "#function-calls"
		},
		{
			"include": "#general-variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "comment.line.pragma.r"
						},
						"2": {
							"name": "entity.name.pragma.name.r"
						}
					},
					"match": "",
					"name": "comment.line.pragma-mark.r"
				},
				{
					"begin": "(^[ \\t]+)?(?=#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.r"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "#",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.r"
								}
							},
							"end": "\\n",
							"name": "comment.line.number-sign.r"
						}
					]
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "",
					"name": "support.constant.misc.r"
				},
				{
					"match": "",
					"name": "constant.language.r"
				},
				{
					"match": "",
					"name": "constant.numeric.imaginary.hexadecimal.r"
				},
				{
					"match": "",
					"name": "constant.numeric.imaginary.decimal.r"
				},
				{
					"match": "",
					"name": "constant.numeric.imaginary.decimal.r"
				},
				{
					"match": "",
					"name": "constant.numeric.integer.hexadecimal.r"
				},
				{
					"match": "",
					"name": "constant.numeric.integer.decimal.r"
				},
				{
					"match": "",
					"name": "constant.numeric.float.hexadecimal.r"
				},
				{
					"match": "",
					"name": "constant.numeric.float.decimal.r"
				},
				{
					"match": "",
					"name": "constant.numeric.float.decimal.r"
				}
			]
		},
		"general-variables": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "variable.parameter.r"
						},
						"2": {
							"name": "keyword.operator.assignment.r"
						}
					},
					"match": "([[:alpha:].][[:alnum:]._]*)\\s*(=)(?=[^=])"
				},
				{
					"match": "",
					"name": "invalid.illegal.variable.other.r"
				},
				{
					"match": "",
					"name": "entity.namespace.r"
				},
				{
					"match": "",
					"name": "variable.other.r"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "",
					"name": "keyword.control.r"
				},
				{
					"match": "",
					"name": "keyword.control.r"
				},
				{
					"match": "",
					"name": "keyword.operator.arithmetic.r"
				},
				{
					"match": "",
					"name": "keyword.operator.comarison.r"
				},
				{
					"match": "",
					"name": "keyword.operator.assignment.r"
				},
				{
					"match": "",
					"name": "keyword.operator.comparison.r"
				},
				{
					"match": "",
					"name": "keyword.operator.logical.r"
				},
				{
					"match": "",
					"name": "keyword.operator.other.r"
				},
				{
					"match": "",
					"name": "keyword.other.r"
				}
			]
		},
		"storage-type": {
			"patterns": [
				{
					"match": "",
					"name": "storage.type.r"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.r"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.r"
						}
					},
					"name": "string.quoted.double.r",
					"patterns": [
						{
							"match": "",
							"name": "constant.character.escape.r"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.r"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.r"
						}
					},
					"name": "string.quoted.single.r",
					"patterns": [
						{
							"match": "",
							"name": "constant.character.escape.r"
						}
					]
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.r"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.r"
						}
					},
					"patterns": [
						{
							"include": "source.r"
						}
					]
				},
				{
					"begin": "\\[(?!\\[)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.brackets.single.begin.r"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.brackets.single.end.r"
						}
					},
					"patterns": [
						{
							"include": "source.r"
						}
					]
				},
				{
					"begin": "\\[\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.brackets.double.begin.r"
						}
					},
					"end": "\\]\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.brackets.double.end.r"
						}
					},
					"contentName": "meta.item-access.arguments.r",
					"patterns": [
						{
							"include": "source.r"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.braces.begin.r"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.braces.end.r"
						}
					},
					"patterns": [
						{
							"include": "source.r"
						}
					]
				}
			]
		},
		"function-declarations": {
			"patterns": [
				{
					"begin": "^\\s*([a-zA-Z._][\\w.:]*)\\s*(<<?-|=)\\s*(?=function\\s*\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.r"
						},
						"2": {
							"name": "keyword.operator.assignment.r"
						},
						"3": {
							"name": "keyword.control.r"
						}
					},
					"end": "(?<=\\))",
					"name": "meta.function.r",
					"patterns": [
						{
							"include": "#lambda-functions"
						}
					]
				}
			]
		},
		"lambda-functions": {
			"patterns": [
				{
					"begin": "\\b(function)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.r"
						},
						"2": {
							"name": "punctuation.section.parens.begin.r"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.r"
						}
					},
					"name": "meta.function.r",
					"contentName": "meta.function.parameters.r",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"match": "",
							"name": "variable.parameter.r"
						},
						{
							"begin": "(?==)",
							"end": "(?=[,)])",
							"patterns": [
								{
									"include": "source.r"
								}
							]
						},
						{
							"match": "",
							"name": "punctuation.separator.parameters.r"
						}
					]
				}
			]
		},
		"function-calls": {
			"begin": "(?:\\b|(?=\\.))((?:[a-zA-Z._][\\w.]*|`[^`]+`))\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.function.r"
				},
				"2": {
					"name": "punctuation.section.parens.begin.r"
				}
			},
			"contentName": "meta.function-call.arguments.r",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.r"
				}
			},
			"name": "meta.function-call.r",
			"patterns": [
				{
					"include": "#function-parameters"
				}
			]
		},
		"function-parameters": {
			"patterns": [
				{
					"name": "meta.function-call.r",
					"contentName": "meta.function-call.parameters.r"
				},
				{
					"match": "",
					"name": "variable.parameter.r"
				},
				{
					"begin": "(?==)",
					"end": "(?=[,)])",
					"patterns": [
						{
							"include": "source.r"
						}
					]
				},
				{
					"match": "",
					"name": "punctuation.separator.parameters.r"
				},
				{
					"end": "\\)",
					"endCaptures": {
						"0": "punctuation.section.parens.end.r"
					}
				},
				{
					"include": "source.r"
				}
			]
		},
		"roxygen": {
			"patterns": [
				{
					"begin": "^(#')\\s*",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.r"
						}
					},
					"end": "$\\n?",
					"name": "comment.line.roxygen.r",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "keyword.other.r"
								},
								"2": {
									"name": "variable.parameter.r"
								}
							},
							"match": "(@param)\\s*((?:[a-zA-Z._][\\w.]*|`[^`]+`))"
						},
						{
							"match": "",
							"name": "keyword.other.r"
						}
					]
				}
			]
		},
		"builtin-functions": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.function.r"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.function.r"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.function.r"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.function.r"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.function.r"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.function.r"
						}
					}
				}
			]
		}
	}
}