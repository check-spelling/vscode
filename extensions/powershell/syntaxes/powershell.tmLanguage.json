{
	"information_for_contributors": [
		"This file has been converted from https://github.com/PowerShell/EditorSyntax/blob/master/PowerShellSyntax.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/PowerShell/EditorSyntax/commit/90e4b5454f2f1cc06eae4c6c8e12c33d9f5f3a8c",
	"name": "PowerShell",
	"scopeName": "source.powershell",
	"patterns": [
		{
			"begin": "<#",
			"beginCaptures": {
				"0": {
					"name": "punctuation.start.definition.comment.block.powershell"
				}
			},
			"end": "#>",
			"endCaptures": {
				"0": {
					"name": "punctuation.end.definition.comment.block.powershell"
				}
			},
			"name": "comment.block.powershell",
			"patterns": [
				{
					"include": "#commentEmbeddedDocs"
				}
			]
		},
		{
			"begin": "(?<![`\\\\-])#",
			"end": "$",
			"name": "comment.line.number-sign.powershell",
			"patterns": [
				{
					"include": "#commentEmbeddedDocs"
				}
			]
		},
		{
			"match": "",
			"name": "keyword.operator.redirection.powershell"
		},
		{
			"include": "#commands"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#interpolatedStringContent"
		},
		{
			"include": "#function"
		},
		{
			"include": "#attribute"
		},
		{
			"include": "#type"
		},
		{
			"begin": "(?<!(?<!`)\")\"",
			"end": "\"(?!\")",
			"name": "string.quoted.double.powershell",
			"patterns": [
				{
					"include": "#variableNoProperty"
				},
				{
					"include": "#doubleQuotedStringEscapes"
				},
				{
					"include": "#interpolation"
				},
				{
					"match": "",
					"name": "keyword.other.powershell"
				}
			]
		},
		{
			"comment": "Needed to parse stuff correctly in 'argument mode'. (See about_parsing.)",
			"include": "#doubleQuotedStringEscapes"
		},
		{
			"begin": "(?<!')'",
			"end": "'(?!')",
			"name": "string.quoted.single.powershell",
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.powershell"
				}
			]
		},
		{
			"begin": "\\@\"(?=$)",
			"end": "^\"@",
			"name": "string.quoted.double.heredoc.powershell",
			"patterns": [
				{
					"include": "#variableNoProperty"
				},
				{
					"include": "#doubleQuotedStringEscapes"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		{
			"begin": "\\@'(?=$)",
			"end": "^'@",
			"name": "string.quoted.single.heredoc.powershell",
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.powershell"
				}
			]
		},
		{
			"include": "#numericConstant"
		},
		{
			"begin": "@\\(",
			"captures": {
				"0": {
					"name": "keyword.other.powershell"
				}
			},
			"end": "\\)",
			"name": "meta.group.array-expression.powershell",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\$\\(",
			"captures": {
				"0": {
					"name": "keyword.other.powershell"
				}
			},
			"comment": "TODO: move to repo; make recursive.",
			"end": "\\)",
			"name": "meta.group.complex.subexpression.powershell",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"match": "",
			"name": "keyword.operator.logical.powershell"
		},
		{
			"match": "",
			"name": "support.function.powershell"
		},
		{
			"match": "",
			"name": "keyword.control.powershell"
		},
		{
			"captures": {
				"1": {
					"name": "storage.type.powershell"
				},
				"2": {
					"name": "entity.name.function"
				}
			},
			"comment": "capture should be entity.name.type, but it doesn't provide a good color in the default schema.",
			"match": ""
		},
		{
			"match": "",
			"name": "keyword.operator.comparison.powershell"
		},
		{
			"match": "",
			"name": "keyword.operator.comparison.powershell"
		},
		{
			"match": "",
			"name": "keyword.operator.unary.powershell"
		},
		{
			"match": "",
			"name": "keyword.operator.logical.powershell"
		},
		{
			"match": "",
			"name": "keyword.operator.bitwise.powershell"
		},
		{
			"match": "",
			"name": "keyword.operator.string-format.powershell"
		},
		{
			"match": "",
			"name": "keyword.operator.assignment.powershell"
		},
		{
			"match": "",
			"name": "keyword.other.statement-separator.powershell"
		},
		{
			"match": "",
			"name": "keyword.operator.other.powershell"
		},
		{
			"comment": "This is very imprecise, is there a syntax for 'must come after...' ",
			"match": "",
			"name": "keyword.operator.range.powershell"
		}
	],
	"repository": {
		"attribute": {
			"begin": "\\[(\\p{L}|\\.|``\\d+)+(?=\\()",
			"beginCaptures": {
				"0": {
					"name": "entity.name.tag"
				},
				"1": {
					"name": "entity.name.tag"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "entity.name.tag"
				}
			},
			"patterns": [
				{
					"begin": "\\(",
					"end": "\\)",
					"name": "entity.other.attribute-name",
					"patterns": [
						{
							"captures": {
								"0": {
									"name": "entity.other.attribute.parameter.powershell"
								},
								"1": {
									"name": "constant.language.powershell"
								},
								"2": {
									"name": "variable.other.powershell"
								}
							},
							"comment": "really we should match the known attributes first",
							"match": "",
							"name": "entity.other.attribute-name.powershell"
						},
						{
							"include": "#variable"
						}
					]
				}
			]
		},
		"commands": {
			"patterns": [
				{
					"comment": "Verb-Noun pattern:",
					"match": "",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "",
					"name": "support.function.powershell"
				},
				{
					"comment": "Builtin cmdlets with reserved verbs",
					"match": "",
					"name": "support.function.powershell"
				}
			]
		},
		"commentEmbeddedDocs": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "constant.string.documentation.powershell"
						},
						"2": {
							"name": "keyword.operator.documentation.powershell"
						}
					},
					"match": "",
					"name": "comment.documentation.embedded.powershell"
				},
				{
					"captures": {
						"1": {
							"name": "constant.string.documentation.powershell"
						},
						"2": {
							"name": "keyword.operator.documentation.powershell"
						},
						"3": {
							"name": "keyword.operator.documentation.powershell"
						}
					},
					"match": "",
					"name": "comment.documentation.embedded.powershell"
				},
				{
					"captures": {
						"1": {
							"name": "constant.string.documentation.powershell"
						},
						"2": {
							"name": "keyword.operator.documentation.powershell"
						},
						"3": {
							"name": "string.quoted.double.heredoc.powershell"
						}
					},
					"match": "",
					"name": "comment.documentation.embedded.powershell"
				}
			]
		},
		"doubleQuotedStringEscapes": {
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.powershell"
				},
				{
					"match": "",
					"name": "constant.character.escape.powershell"
				}
			]
		},
		"function": {
			"begin": "(?<!\\S)(?i)(function|filter|configuration|workflow)\\s+(?:(global|local|script|private):)?((?:\\p{L}|\\d|_|-|\\.)+)",
			"beginCaptures": {
				"0": {
					"name": "meta.function"
				},
				"1": {
					"name": "storage.type"
				},
				"2": {
					"name": "storage.modifier.scope.powershell"
				},
				"3": {
					"name": "entity.name.function.powershell"
				}
			},
			"end": "\\{|\\("
		},
		"interpolatedStringContent": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.powershell"
				}
			},
			"contentName": "interpolated.simple.source.powershell",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "keyword.other.powershell"
				}
			},
			"patterns": [
				{
					"include": "$self"
				},
				{
					"include": "#interpolation"
				},
				{
					"include": "#interpolatedStringContent"
				}
			]
		},
		"interpolation": {
			"begin": "(\\$)\\(",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.powershell"
				}
			},
			"contentName": "interpolated.complex.source.powershell",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "keyword.other.powershell"
				}
			},
			"patterns": [
				{
					"include": "$self"
				},
				{
					"include": "#interpolation"
				},
				{
					"include": "#interpolatedStringContent"
				}
			]
		},
		"numericConstant": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.operator.math.powershell"
						},
						"2": {
							"name": "support.constant.powershell"
						},
						"3": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "",
					"name": "constant.numeric.hexadecimal.powershell"
				},
				{
					"captures": {
						"1": {
							"name": "support.constant.powershell"
						},
						"2": {
							"name": "keyword.operator.math.powershell"
						},
						"3": {
							"name": "support.constant.powershell"
						},
						"4": {
							"name": "keyword.other.powershell"
						},
						"5": {
							"name": "keyword.other.powershell"
						}
					},
					"match": "",
					"name": "constant.numeric.scientific.powershell"
				}
			]
		},
		"scriptblock": {
			"begin": "\\{",
			"end": "\\}",
			"name": "meta.scriptblock.powershell",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"type": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "entity.other.attribute-name"
				}
			},
			"comment": "name should be entity.name.type but default schema doesn't have a good color for it",
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "entity.other.attribute-name"
				}
			},
			"patterns": [
				{
					"match": "",
					"name": "entity.other.attribute-name"
				},
				{
					"include": "$self"
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "constant.language.powershell"
						}
					},
					"comment": "These are special constants.",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.constant.variable.powershell"
						},
						"3": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"comment": "These are the other built-in constants.",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.constant.automatic.powershell"
						},
						"3": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"comment": "Automatic variables are not constants, but they are read-only. In monokai (default) color schema support.variable doesn't have color, so we use constant.",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "variable.language.powershell"
						},
						"3": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"comment": "Style preference variables as language variables so that they stand out.",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "storage.modifier.scope.powershell"
						},
						"3": {
							"name": "variable.other.normal.powershell"
						},
						"4": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "storage.modifier.scope.powershell"
						},
						"3": {
							"name": "variable.other.readwrite.powershell"
						},
						"4": {
							"name": "keyword.other.powershell"
						},
						"5": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.variable.drive.powershell"
						},
						"3": {
							"name": "variable.other.readwrite.powershell"
						},
						"4": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.variable.drive.powershell"
						},
						"3": {
							"name": "variable.other.readwrite.powershell"
						},
						"4": {
							"name": "keyword.other.powershell"
						},
						"5": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				}
			]
		},
		"variableNoProperty": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "constant.language.powershell"
						}
					},
					"comment": "These are special constants.",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.constant.variable.powershell"
						},
						"3": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"comment": "These are the other built-in constants.",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.variable.automatic.powershell"
						},
						"3": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"comment": "Automatic variables are not constants, but they are read-only...",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "variable.language.powershell"
						},
						"3": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"comment": "Style preference variables as language variables so that they stand out.",
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "storage.modifier.scope.powershell"
						},
						"3": {
							"name": "variable.other.normal.powershell"
						},
						"4": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "storage.modifier.scope.powershell"
						},
						"3": {
							"name": "variable.other.readwrite.powershell"
						},
						"4": {
							"name": "keyword.other.powershell"
						},
						"5": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.variable.drive.powershell"
						},
						"3": {
							"name": "variable.other.readwrite.powershell"
						},
						"4": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.powershell"
						},
						"2": {
							"name": "support.variable.drive.powershell"
						},
						"3": {
							"name": "variable.other.readwrite.powershell"
						},
						"4": {
							"name": "keyword.other.powershell"
						},
						"5": {
							"name": "entity.name.function.invocation.powershell"
						}
					},
					"match": ""
				}
			]
		}
	}
}