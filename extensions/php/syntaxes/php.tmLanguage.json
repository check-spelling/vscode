{
	"information_for_contributors": [
		"This file has been converted from https://github.com/atom/language-php/blob/master/grammars/php.cson",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/atom/language-php/commit/b054176835218c446d22b3c1b9dcfdcf8cacf49f",
	"scopeName": "source.php",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"begin": "(?i)^\\s*(interface)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(extends)?\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.type.interface.php"
				},
				"2": {
					"name": "entity.name.type.interface.php"
				},
				"3": {
					"name": "storage.modifier.extends.php"
				}
			},
			"end": "(?i)((?:[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\s*,\\s*)*)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?\\s*(?:(?={)|$)",
			"endCaptures": {
				"1": {
					"patterns": [
						{
							"match": "",
							"name": "entity.other.inherited-class.php"
						},
						{
							"match": "",
							"name": "punctuation.separator.classes.php"
						}
					]
				},
				"2": {
					"name": "entity.other.inherited-class.php"
				}
			},
			"name": "meta.interface.php",
			"patterns": [
				{
					"include": "#namespace"
				}
			]
		},
		{
			"begin": "(?i)^\\s*(trait)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.trait.php"
				},
				"2": {
					"name": "entity.name.type.trait.php"
				}
			},
			"end": "(?={)",
			"name": "meta.trait.php",
			"patterns": [
				{
					"include": "#comments"
				}
			]
		},
		{
			"match": "",
			"name": "meta.namespace.php",
			"captures": {
				"1": {
					"name": "keyword.other.namespace.php"
				},
				"2": {
					"name": "entity.name.type.namespace.php",
					"patterns": [
						{
							"match": "",
							"name": "punctuation.separator.inheritance.php"
						}
					]
				}
			}
		},
		{
			"begin": "(?i)(?:^|(?<=<\\?php))\\s*(namespace)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.namespace.php"
				}
			},
			"end": "(?<=})|(?=\\?>)",
			"name": "meta.namespace.php",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "",
					"name": "entity.name.type.namespace.php",
					"captures": {
						"0": {
							"patterns": [
								{
									"match": "",
									"name": "punctuation.separator.inheritance.php"
								}
							]
						}
					}
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.namespace.begin.bracket.curly.php"
						}
					},
					"end": "}|(?=\\?>)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.namespace.end.bracket.curly.php"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "",
					"name": "invalid.illegal.identifier.php"
				}
			]
		},
		{
			"match": ""
		},
		{
			"begin": "(?i)\\buse\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.use.php"
				}
			},
			"end": "(?<=})|(?=;)",
			"name": "meta.use.php",
			"patterns": [
				{
					"match": "",
					"name": "storage.type.${1:/downcase}.php"
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.use.begin.bracket.curly.php"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.use.end.bracket.curly.php"
						}
					},
					"patterns": [
						{
							"include": "#scope-resolution"
						},
						{
							"match": "",
							"captures": {
								"1": {
									"name": "keyword.other.use-as.php"
								},
								"2": {
									"name": "storage.modifier.php"
								},
								"3": {
									"name": "entity.other.alias.php"
								}
							}
						},
						{
							"match": "",
							"captures": {
								"1": {
									"name": "keyword.other.use-as.php"
								},
								"2": {
									"patterns": [
										{
											"match": "",
											"name": "storage.modifier.php"
										},
										{
											"match": "",
											"name": "entity.other.alias.php"
										}
									]
								}
							}
						},
						{
							"match": "",
							"captures": {
								"1": {
									"name": "keyword.other.use-insteadof.php"
								},
								"2": {
									"name": "support.class.php"
								}
							}
						},
						{
							"match": "",
							"name": "punctuation.terminator.expression.php"
						},
						{
							"include": "#use-inner"
						}
					]
				},
				{
					"include": "#use-inner"
				}
			]
		},
		{
			"begin": "(?i)(?:^|(?<=}))\\s*(?:(abstract|final)\\s+)?(class)\\s+([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.${1:/downcase}.php"
				},
				"2": {
					"name": "storage.type.class.php"
				},
				"3": {
					"name": "entity.name.type.class.php"
				}
			},
			"end": "}|(?=\\?>)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.class.end.bracket.curly.php"
				}
			},
			"name": "meta.class.php",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "(?i)(extends)\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.extends.php"
						}
					},
					"contentName": "meta.other.inherited-class.php",
					"end": "(?i)(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
					"patterns": [
						{
							"begin": "(?i)(?=\\\\?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)",
							"end": "(?i)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
							"endCaptures": {
								"1": {
									"name": "entity.other.inherited-class.php"
								}
							},
							"patterns": [
								{
									"include": "#namespace"
								}
							]
						},
						{
							"include": "#class-builtin"
						},
						{
							"include": "#namespace"
						},
						{
							"match": "",
							"name": "entity.other.inherited-class.php"
						}
					]
				},
				{
					"begin": "(?i)(implements)\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.implements.php"
						}
					},
					"end": "(?i)(?=[;{])",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": "(?i)(?=[a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]+)",
							"contentName": "meta.other.inherited-class.php",
							"end": "(?i)(?:\\s*(?:,|(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\\\s]))\\s*)",
							"patterns": [
								{
									"begin": "(?i)(?=\\\\?[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)",
									"end": "(?i)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
									"endCaptures": {
										"1": {
											"name": "entity.other.inherited-class.php"
										}
									},
									"patterns": [
										{
											"include": "#namespace"
										}
									]
								},
								{
									"include": "#class-builtin"
								},
								{
									"include": "#namespace"
								},
								{
									"match": "",
									"name": "entity.other.inherited-class.php"
								}
							]
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.class.begin.bracket.curly.php"
						}
					},
					"end": "(?=}|\\?>)",
					"contentName": "meta.class.body.php",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		{
			"include": "#switch_statement"
		},
		{
			"match": "",
			"captures": {
				"1": {
					"name": "keyword.control.yield-from.php"
				}
			}
		},
		{
			"match": "",
			"captures": {
				"1": {
					"name": "keyword.control.${1:/downcase}.php"
				}
			}
		},
		{
			"begin": "(?i)\\b((?:require|include)(?:_once)?)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.include.php"
				}
			},
			"end": "(?=\\s|;|$|\\?>)",
			"name": "meta.include.php",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\b(catch)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.exception.catch.php"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.bracket.round.php"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.php"
				}
			},
			"name": "meta.catch.php",
			"patterns": [
				{
					"include": "#namespace"
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "support.class.exception.php"
						},
						"2": {
							"patterns": [
								{
									"match": "",
									"name": "support.class.exception.php"
								},
								{
									"match": "",
									"name": "punctuation.separator.delimiter.php"
								}
							]
						},
						"3": {
							"name": "variable.other.php"
						},
						"4": {
							"name": "punctuation.definition.variable.php"
						}
					}
				}
			]
		},
		{
			"match": "",
			"name": "keyword.control.exception.php"
		},
		{
			"begin": "(?i)\\b(function)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.php"
				}
			},
			"end": "(?={)",
			"name": "meta.function.closure.php",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.begin.bracket.round.php"
						}
					},
					"contentName": "meta.function.parameters.php",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.php"
						}
					},
					"patterns": [
						{
							"include": "#function-parameters"
						}
					]
				},
				{
					"begin": "(?i)(use)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.function.use.php"
						},
						"2": {
							"name": "punctuation.definition.parameters.begin.bracket.round.php"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.bracket.round.php"
						}
					},
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "variable.other.php"
								},
								"2": {
									"name": "storage.modifier.reference.php"
								},
								"3": {
									"name": "punctuation.definition.variable.php"
								}
							},
							"match": "",
							"name": "meta.function.closure.use.php"
						}
					]
				}
			]
		},
		{
			"begin": "(?x)\n((?:(?:final|abstract|public|private|protected|static)\\s+)*)\n(function)\\s+\n(?i:\n  (__(?:call|construct|debugInfo|destruct|get|set|isset|unset|toString|\n        clone|set_state|sleep|wakeup|autoload|invoke|callStatic))\n  |([a-zA-Z_\\x{7f}-\\x{7fffffff}][a-zA-Z0-9_\\x{7f}-\\x{7fffffff}]*)\n)\n\\s*(\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"match": "",
							"name": "storage.modifier.php"
						}
					]
				},
				"2": {
					"name": "storage.type.function.php"
				},
				"3": {
					"name": "support.function.magic.php"
				},
				"4": {
					"name": "entity.name.function.php"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.bracket.round.php"
				}
			},
			"contentName": "meta.function.parameters.php",
			"end": "(\\))(?:\\s*(:)\\s*(\\?)?\\s*([a-zA-Z_\\x{7f}-\\x{7fffffff}][a-zA-Z0-9_\\x{7f}-\\x{7fffffff}]*))?",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.end.bracket.round.php"
				},
				"2": {
					"name": "keyword.operator.return-value.php"
				},
				"3": {
					"name": "keyword.operator.nullable-type.php"
				},
				"4": {
					"name": "storage.type.php"
				}
			},
			"name": "meta.function.php",
			"patterns": [
				{
					"include": "#function-parameters"
				}
			]
		},
		{
			"include": "#invoke-call"
		},
		{
			"include": "#scope-resolution"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#strings"
		},
		{
			"captures": {
				"1": {
					"name": "support.function.construct.php"
				},
				"2": {
					"name": "punctuation.definition.array.begin.bracket.round.php"
				},
				"3": {
					"name": "punctuation.definition.array.end.bracket.round.php"
				}
			},
			"match": "",
			"name": "meta.array.empty.php"
		},
		{
			"begin": "(array)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "support.function.construct.php"
				},
				"2": {
					"name": "punctuation.definition.array.begin.bracket.round.php"
				}
			},
			"end": "\\)|(?=\\?>)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.bracket.round.php"
				}
			},
			"name": "meta.array.php",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"match": "",
			"captures": {
				"1": {
					"name": "punctuation.definition.storage-type.begin.bracket.round.php"
				},
				"2": {
					"name": "storage.type.php"
				},
				"3": {
					"name": "punctuation.definition.storage-type.end.bracket.round.php"
				}
			}
		},
		{
			"match": "",
			"name": "storage.type.php"
		},
		{
			"match": "",
			"name": "storage.modifier.php"
		},
		{
			"include": "#object"
		},
		{
			"match": "",
			"name": "punctuation.terminator.expression.php"
		},
		{
			"match": "",
			"name": "punctuation.terminator.statement.php"
		},
		{
			"include": "#heredoc"
		},
		{
			"include": "#numbers"
		},
		{
			"match": "",
			"name": "keyword.other.clone.php"
		},
		{
			"match": "",
			"name": "keyword.operator.string.php"
		},
		{
			"match": "",
			"name": "keyword.operator.key.php"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.operator.assignment.php"
				},
				"2": {
					"name": "storage.modifier.reference.php"
				},
				"3": {
					"name": "storage.modifier.reference.php"
				}
			},
			"match": ""
		},
		{
			"match": "",
			"name": "keyword.operator.error-control.php"
		},
		{
			"match": "",
			"name": "keyword.operator.comparison.php"
		},
		{
			"match": "",
			"name": "keyword.operator.assignment.php"
		},
		{
			"match": "",
			"name": "keyword.operator.comparison.php"
		},
		{
			"match": "",
			"name": "keyword.operator.increment-decrement.php"
		},
		{
			"match": "",
			"name": "keyword.operator.arithmetic.php"
		},
		{
			"match": "",
			"name": "keyword.operator.logical.php"
		},
		{
			"include": "#function-call"
		},
		{
			"match": "",
			"name": "keyword.operator.bitwise.php"
		},
		{
			"begin": "(?i)\\b(instanceof)\\s+(?=[\\\\$a-z_])",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.type.php"
				}
			},
			"end": "(?=[^\\\\$a-z0-9_\\x{7f}-\\x{7fffffff}])",
			"patterns": [
				{
					"include": "#class-name"
				},
				{
					"include": "#variable-name"
				}
			]
		},
		{
			"include": "#instantiation"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.goto.php"
				},
				"2": {
					"name": "support.other.php"
				}
			},
			"match": ""
		},
		{
			"captures": {
				"1": {
					"name": "entity.name.goto-label.php"
				}
			},
			"match": ""
		},
		{
			"include": "#string-backtick"
		},
		{
			"include": "#ternary_shorthand"
		},
		{
			"include": "#null_coalescing"
		},
		{
			"include": "#ternary_expression"
		},
		{
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.begin.bracket.curly.php"
				}
			},
			"end": "}|(?=\\?>)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.curly.php"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.php"
				}
			},
			"end": "\\]|(?=\\?>)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.php"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.begin.bracket.round.php"
				}
			},
			"end": "\\)|(?=\\?>)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.round.php"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		{
			"include": "#constants"
		},
		{
			"match": "",
			"name": "punctuation.separator.delimiter.php"
		}
	],
	"repository": {
		"class-builtin": {
			"patterns": [
				{
					"match": "",
					"name": "support.class.builtin.php",
					"captures": {
						"1": {
							"name": "punctuation.separator.inheritance.php"
						}
					}
				}
			]
		},
		"class-name": {
			"patterns": [
				{
					"begin": "(?i)(?=\\\\?[a-z_0-9]+\\\\)",
					"end": "(?i)([a-z_][a-z_0-9]*)?(?![a-z0-9_\\\\])",
					"endCaptures": {
						"1": {
							"name": "support.class.php"
						}
					},
					"patterns": [
						{
							"include": "#namespace"
						}
					]
				},
				{
					"include": "#class-builtin"
				},
				{
					"begin": "(?=[\\\\a-zA-Z_])",
					"end": "(?i)([a-z_][a-z_0-9]*)?(?![a-z0-9_\\\\])",
					"endCaptures": {
						"1": {
							"name": "support.class.php"
						}
					},
					"patterns": [
						{
							"include": "#namespace"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*\\*(?=\\s)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.php"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.php"
						}
					},
					"name": "comment.block.documentation.phpdoc.php",
					"patterns": [
						{
							"include": "#php_doc"
						}
					]
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.php"
						}
					},
					"end": "\\*/",
					"name": "comment.block.php"
				},
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.php"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.php"
								}
							},
							"end": "\\n|(?=\\?>)",
							"name": "comment.line.double-slash.php"
						}
					]
				},
				{
					"begin": "(^\\s+)?(?=#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.php"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "#",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.php"
								}
							},
							"end": "\\n|(?=\\?>)",
							"name": "comment.line.number-sign.php"
						}
					]
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "",
					"name": "constant.language.php"
				},
				{
					"match": "",
					"name": "support.constant.core.php",
					"captures": {
						"1": {
							"name": "punctuation.separator.inheritance.php"
						}
					}
				},
				{
					"match": "",
					"name": "support.constant.std.php",
					"captures": {
						"1": {
							"name": "punctuation.separator.inheritance.php"
						}
					}
				},
				{
					"match": "",
					"name": "support.constant.ext.php",
					"captures": {
						"1": {
							"name": "punctuation.separator.inheritance.php"
						}
					}
				},
				{
					"match": "",
					"name": "support.constant.parser-token.php",
					"captures": {
						"1": {
							"name": "punctuation.separator.inheritance.php"
						}
					}
				},
				{
					"match": "",
					"name": "constant.other.php"
				}
			]
		},
		"function-parameters": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "",
					"name": "punctuation.separator.delimiter.php"
				},
				{
					"begin": "(?xi)\n(?:(\\?)\\s*)?(array)                                              # Typehint\n\\s+((&)?\\s*(\\$+)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*) # Variable name with possible reference\n\\s*(=)\\s*(array)\\s*(\\()                                        # Default value",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.nullable-type.php"
						},
						"2": {
							"name": "storage.type.php"
						},
						"3": {
							"name": "variable.other.php"
						},
						"4": {
							"name": "storage.modifier.reference.php"
						},
						"5": {
							"name": "punctuation.definition.variable.php"
						},
						"6": {
							"name": "keyword.operator.assignment.php"
						},
						"7": {
							"name": "support.function.construct.php"
						},
						"8": {
							"name": "punctuation.definition.array.begin.bracket.round.php"
						}
					},
					"contentName": "meta.array.php",
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.array.end.bracket.round.php"
						}
					},
					"name": "meta.function.parameter.array.php",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#numbers"
						}
					]
				},
				{
					"match": "",
					"name": "meta.function.parameter.array.php",
					"captures": {
						"1": {
							"name": "keyword.operator.nullable-type.php"
						},
						"2": {
							"name": "storage.type.php"
						},
						"3": {
							"name": "variable.other.php"
						},
						"4": {
							"name": "storage.modifier.reference.php"
						},
						"5": {
							"name": "punctuation.definition.variable.php"
						},
						"6": {
							"name": "keyword.operator.assignment.php"
						},
						"7": {
							"name": "constant.language.php"
						},
						"8": {
							"name": "punctuation.section.array.begin.php"
						},
						"9": {
							"patterns": [
								{
									"include": "#parameter-default-types"
								}
							]
						},
						"10": {
							"name": "punctuation.section.array.end.php"
						},
						"11": {
							"name": "invalid.illegal.non-null-typehinted.php"
						}
					}
				},
				{
					"begin": "(?xi)\n(?:(\\?)\\s*)?\n(\\\\?(?:[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)*)                 # Optional namespace\n([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)                               # Typehinted class name\n\\s+((&)?\\s*(\\.\\.\\.)?(\\$+)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*) # Variable name with possible reference",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.nullable-type.php"
						},
						"2": {
							"name": "support.other.namespace.php",
							"patterns": [
								{
									"match": "",
									"name": "storage.type.php"
								},
								{
									"match": "",
									"name": "punctuation.separator.inheritance.php"
								}
							]
						},
						"3": {
							"name": "storage.type.php"
						},
						"4": {
							"name": "variable.other.php"
						},
						"5": {
							"name": "storage.modifier.reference.php"
						},
						"6": {
							"name": "keyword.operator.variadic.php"
						},
						"7": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"end": "(?=,|\\)|/[/*]|\\#)",
					"name": "meta.function.parameter.typehinted.php",
					"patterns": [
						{
							"begin": "=",
							"beginCaptures": {
								"0": {
									"name": "keyword.operator.assignment.php"
								}
							},
							"end": "(?=,|\\)|/[/*]|\\#)",
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.php"
						},
						"2": {
							"name": "storage.modifier.reference.php"
						},
						"3": {
							"name": "keyword.operator.variadic.php"
						},
						"4": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"match": "",
					"name": "meta.function.parameter.no-default.php"
				},
				{
					"begin": "(?xi)\n((&)?\\s*(\\.\\.\\.)?(\\$+)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*) # Variable name with possible reference\n\\s*(=)\\s*\n(?:(\\[)((?>[^\\[\\]]+|\\[\\g<6>\\])*)(\\]))?                              # Optional default type",
					"beginCaptures": {
						"1": {
							"name": "variable.other.php"
						},
						"2": {
							"name": "storage.modifier.reference.php"
						},
						"3": {
							"name": "keyword.operator.variadic.php"
						},
						"4": {
							"name": "punctuation.definition.variable.php"
						},
						"5": {
							"name": "keyword.operator.assignment.php"
						},
						"6": {
							"name": "punctuation.section.array.begin.php"
						},
						"7": {
							"patterns": [
								{
									"include": "#parameter-default-types"
								}
							]
						},
						"8": {
							"name": "punctuation.section.array.end.php"
						}
					},
					"end": "(?=,|\\)|/[/*]|\\#)",
					"name": "meta.function.parameter.default.php",
					"patterns": [
						{
							"include": "#parameter-default-types"
						}
					]
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"begin": "(?xi)\n(\n  \\\\?(?<![a-z0-9_\\x{7f}-\\x{7fffffff}])                            # Optional root namespace\n  [a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*          # First namespace\n  (?:\\\\[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)+ # Additional namespaces\n)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#namespace"
								},
								{
									"match": "",
									"name": "entity.name.function.php"
								}
							]
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.bracket.round.php"
						}
					},
					"end": "\\)|(?=\\?>)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.php"
						}
					},
					"name": "meta.function-call.php",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?i)(\\\\)?(?<![a-z0-9_\\x{7f}-\\x{7fffffff}])([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#namespace"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#support"
								},
								{
									"match": "",
									"name": "entity.name.function.php"
								}
							]
						},
						"3": {
							"name": "punctuation.definition.arguments.begin.bracket.round.php"
						}
					},
					"end": "\\)|(?=\\?>)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.php"
						}
					},
					"name": "meta.function-call.php",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "",
					"name": "support.function.construct.output.php"
				}
			]
		},
		"heredoc": {
			"patterns": [
				{
					"begin": "(?i)(?=<<<\\s*(\"?)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)(\\1)\\s*$)",
					"end": "(?!\\G)",
					"name": "string.unquoted.heredoc.php",
					"patterns": [
						{
							"include": "#heredoc_interior"
						}
					]
				},
				{
					"begin": "(?=<<<\\s*'([a-zA-Z_]+[a-zA-Z0-9_]*)'\\s*$)",
					"end": "(?!\\G)",
					"name": "string.unquoted.nowdoc.php",
					"patterns": [
						{
							"include": "#nowdoc_interior"
						}
					]
				}
			]
		},
		"heredoc_interior": {
			"patterns": [
				{
					"begin": "(<<<)\\s*(\"?)(HTML)(\\2)(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "text.html",
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"name": "meta.embedded.html",
					"patterns": [
						{
							"include": "#interpolation"
						},
						{
							"include": "text.html.basic"
						}
					]
				},
				{
					"begin": "(<<<)\\s*(\"?)(XML)(\\2)(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "text.xml",
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"name": "meta.embedded.xml",
					"patterns": [
						{
							"include": "#interpolation"
						},
						{
							"include": "text.xml"
						}
					]
				},
				{
					"begin": "(<<<)\\s*(\"?)(SQL)(\\2)(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.sql",
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"name": "meta.embedded.sql",
					"patterns": [
						{
							"include": "#interpolation"
						},
						{
							"include": "source.sql"
						}
					]
				},
				{
					"begin": "(<<<)\\s*(\"?)(JAVASCRIPT|JS)(\\2)(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.js",
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"name": "meta.embedded.js",
					"patterns": [
						{
							"include": "#interpolation"
						},
						{
							"include": "source.js"
						}
					]
				},
				{
					"begin": "(<<<)\\s*(\"?)(JSON)(\\2)(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.json",
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"name": "meta.embedded.json",
					"patterns": [
						{
							"include": "#interpolation"
						},
						{
							"include": "source.json"
						}
					]
				},
				{
					"begin": "(<<<)\\s*(\"?)(CSS)(\\2)(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.css",
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"name": "meta.embedded.css",
					"patterns": [
						{
							"include": "#interpolation"
						},
						{
							"include": "source.css"
						}
					]
				},
				{
					"begin": "(<<<)\\s*(\"?)(REGEXP?)(\\2)(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "string.regexp.heredoc.php",
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"patterns": [
						{
							"include": "#interpolation"
						},
						{
							"match": "",
							"name": "constant.character.escape.regex.php"
						},
						{
							"captures": {
								"1": {
									"name": "punctuation.definition.arbitrary-repitition.php"
								},
								"3": {
									"name": "punctuation.definition.arbitrary-repitition.php"
								}
							},
							"match": "",
							"name": "string.regexp.arbitrary-repitition.php"
						},
						{
							"begin": "\\[(?:\\^?\\])?",
							"captures": {
								"0": {
									"name": "punctuation.definition.character-class.php"
								}
							},
							"end": "\\]",
							"name": "string.regexp.character-class.php",
							"patterns": [
								{
									"match": "",
									"name": "constant.character.escape.php"
								}
							]
						},
						{
							"match": "",
							"name": "keyword.operator.regexp.php"
						},
						{
							"begin": "(?i)(?<=^|\\s)(#)\\s(?=[[a-z0-9_\\x{7f}-\\x{7fffffff},. \\t?!-][^\\x{00}-\\x{7f}]]*$)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.definition.comment.php"
								}
							},
							"end": "$",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.comment.php"
								}
							},
							"name": "comment.line.number-sign.php"
						}
					]
				},
				{
					"begin": "(?i)(<<<)\\s*(\"?)([a-z_\\x{7f}-\\x{7fffffff}]+[a-z0-9_\\x{7f}-\\x{7fffffff}]*)(\\2)(\\s*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"3": {
							"name": "keyword.operator.heredoc.php"
						},
						"5": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"end": "^(\\3)(?=;?$)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.heredoc.php"
						}
					},
					"patterns": [
						{
							"include": "#interpolation"
						}
					]
				}
			]
		},
		"nowdoc_interior": {
			"patterns": [
				{
					"begin": "(<<<)\\s*'(HTML)'(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "text.html",
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					},
					"name": "meta.embedded.html",
					"patterns": [
						{
							"include": "text.html.basic"
						}
					]
				},
				{
					"begin": "(<<<)\\s*'(XML)'(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "text.xml",
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					},
					"name": "meta.embedded.xml",
					"patterns": [
						{
							"include": "text.xml"
						}
					]
				},
				{
					"begin": "(<<<)\\s*'(SQL)'(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.sql",
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					},
					"name": "meta.embedded.sql",
					"patterns": [
						{
							"include": "source.sql"
						}
					]
				},
				{
					"begin": "(<<<)\\s*'(JAVASCRIPT|JS)'(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.js",
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					},
					"name": "meta.embedded.js",
					"patterns": [
						{
							"include": "source.js"
						}
					]
				},
				{
					"begin": "(<<<)\\s*'(JSON)'(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.json",
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					},
					"name": "meta.embedded.json",
					"patterns": [
						{
							"include": "source.json"
						}
					]
				},
				{
					"begin": "(<<<)\\s*'(CSS)'(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "source.css",
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					},
					"name": "meta.embedded.css",
					"patterns": [
						{
							"include": "source.css"
						}
					]
				},
				{
					"begin": "(<<<)\\s*'(REGEXP?)'(\\s*)$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.php"
						},
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"contentName": "string.regexp.nowdoc.php",
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.php"
						},
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					},
					"patterns": [
						{
							"match": "",
							"name": "constant.character.escape.regex.php"
						},
						{
							"captures": {
								"1": {
									"name": "punctuation.definition.arbitrary-repitition.php"
								},
								"3": {
									"name": "punctuation.definition.arbitrary-repitition.php"
								}
							},
							"match": "",
							"name": "string.regexp.arbitrary-repitition.php"
						},
						{
							"begin": "\\[(?:\\^?\\])?",
							"captures": {
								"0": {
									"name": "punctuation.definition.character-class.php"
								}
							},
							"end": "\\]",
							"name": "string.regexp.character-class.php",
							"patterns": [
								{
									"match": "",
									"name": "constant.character.escape.php"
								}
							]
						},
						{
							"match": "",
							"name": "keyword.operator.regexp.php"
						},
						{
							"begin": "(?i)(?<=^|\\s)(#)\\s(?=[[a-z0-9_\\x{7f}-\\x{7fffffff},. \\t?!-][^\\x{00}-\\x{7f}]]*$)",
							"beginCaptures": {
								"1": {
									"name": "punctuation.definition.comment.php"
								}
							},
							"end": "$",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.comment.php"
								}
							},
							"name": "comment.line.number-sign.php"
						}
					]
				},
				{
					"begin": "(?i)(<<<)\\s*'([a-z_\\x{7f}-\\x{7fffffff}]+[a-z0-9_\\x{7f}-\\x{7fffffff}]*)'(\\s*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.php"
						},
						"2": {
							"name": "keyword.operator.nowdoc.php"
						},
						"3": {
							"name": "invalid.illegal.trailing-whitespace.php"
						}
					},
					"end": "^(\\2)(?=;?$)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.nowdoc.php"
						}
					}
				}
			]
		},
		"instantiation": {
			"begin": "(?i)(new)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.new.php"
				}
			},
			"end": "(?i)(?=[^a-z0-9_\\x{7f}-\\x{7fffffff}\\\\])",
			"patterns": [
				{
					"match": "",
					"name": "storage.type.php"
				},
				{
					"include": "#class-name"
				},
				{
					"include": "#variable-name"
				}
			]
		},
		"interpolation": {
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.octal.php"
				},
				{
					"match": "",
					"name": "constant.character.escape.hex.php"
				},
				{
					"match": "",
					"name": "constant.character.escape.unicode.php"
				},
				{
					"match": "",
					"name": "constant.character.escape.php"
				},
				{
					"begin": "{(?=\\$.*?})",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "#variable-name"
				}
			]
		},
		"interpolation_double_quoted": {
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.php"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		"invoke-call": {
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.php"
				},
				"2": {
					"name": "variable.other.php"
				}
			},
			"match": "",
			"name": "meta.function-call.invoke.php"
		},
		"namespace": {
			"begin": "(?i)(?:(namespace)|[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?(\\\\)",
			"beginCaptures": {
				"1": {
					"name": "variable.language.namespace.php"
				},
				"2": {
					"name": "punctuation.separator.inheritance.php"
				}
			},
			"end": "(?i)(?![a-z0-9_\\x{7f}-\\x{7fffffff}]*\\\\)",
			"name": "support.other.namespace.php",
			"patterns": [
				{
					"match": "",
					"name": "punctuation.separator.inheritance.php"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "",
					"name": "constant.numeric.hex.php"
				},
				{
					"match": "",
					"name": "constant.numeric.binary.php"
				},
				{
					"match": "",
					"name": "constant.numeric.octal.php"
				},
				{
					"match": "",
					"name": "constant.numeric.decimal.php",
					"captures": {
						"1": {
							"name": "punctuation.separator.decimal.period.php"
						},
						"2": {
							"name": "punctuation.separator.decimal.period.php"
						}
					}
				},
				{
					"match": "",
					"name": "constant.numeric.decimal.php"
				}
			]
		},
		"object": {
			"patterns": [
				{
					"begin": "(->)(\\$?{)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.class.php"
						},
						"2": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(?i)(->)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.class.php"
						},
						"2": {
							"name": "entity.name.function.php"
						},
						"3": {
							"name": "punctuation.definition.arguments.begin.bracket.round.php"
						}
					},
					"end": "\\)|(?=\\?>)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.php"
						}
					},
					"name": "meta.method-call.php",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"captures": {
						"1": {
							"name": "keyword.operator.class.php"
						},
						"2": {
							"name": "variable.other.property.php"
						},
						"3": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"match": ""
				}
			]
		},
		"parameter-default-types": {
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#string-backtick"
				},
				{
					"include": "#variables"
				},
				{
					"match": "",
					"name": "keyword.operator.key.php"
				},
				{
					"match": "",
					"name": "keyword.operator.assignment.php"
				},
				{
					"match": "",
					"name": "storage.modifier.reference.php"
				},
				{
					"begin": "(array)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "support.function.construct.php"
						},
						"2": {
							"name": "punctuation.definition.array.begin.bracket.round.php"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.array.end.bracket.round.php"
						}
					},
					"name": "meta.array.php",
					"patterns": [
						{
							"include": "#parameter-default-types"
						}
					]
				},
				{
					"include": "#instantiation"
				},
				{
					"begin": "(?xi)\n(?=[a-z0-9_\\x{7f}-\\x{7fffffff}\\\\]+(::)\n  ([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?\n)",
					"end": "(?i)(::)([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)?",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.class.php"
						},
						"2": {
							"name": "constant.other.class.php"
						}
					},
					"patterns": [
						{
							"include": "#class-name"
						}
					]
				},
				{
					"include": "#constants"
				}
			]
		},
		"php_doc": {
			"patterns": [
				{
					"match": "",
					"name": "invalid.illegal.missing-asterisk.phpdoc.php"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.phpdoc.php"
						},
						"3": {
							"name": "storage.modifier.php"
						},
						"4": {
							"name": "invalid.illegal.wrong-access-type.phpdoc.php"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.phpdoc.php"
						},
						"2": {
							"name": "markup.underline.link.php"
						}
					},
					"match": ""
				},
				{
					"begin": "(@(?:global|param|property(-(read|write))?|return|throws|var))\\s+(?=[A-Za-z_\\x{7f}-\\x{7fffffff}\\\\]|\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.phpdoc.php"
						}
					},
					"end": "(?=\\s|\\*/)",
					"contentName": "meta.other.type.phpdoc.php",
					"patterns": [
						{
							"include": "#php_doc_types_array_multiple"
						},
						{
							"include": "#php_doc_types_array_single"
						},
						{
							"include": "#php_doc_types"
						}
					]
				},
				{
					"match": "",
					"name": "keyword.other.phpdoc.php"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.phpdoc.php"
						}
					},
					"match": "",
					"name": "meta.tag.inline.phpdoc.php"
				}
			]
		},
		"php_doc_types": {
			"match": "",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "",
							"name": "keyword.other.type.php"
						},
						{
							"include": "#class-name"
						},
						{
							"match": "",
							"name": "punctuation.separator.delimiter.php"
						}
					]
				}
			}
		},
		"php_doc_types_array_multiple": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.type.begin.bracket.round.phpdoc.php"
				}
			},
			"end": "(\\))(\\[\\])|(?=\\*/)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.type.end.bracket.round.phpdoc.php"
				},
				"2": {
					"name": "keyword.other.array.phpdoc.php"
				}
			},
			"patterns": [
				{
					"include": "#php_doc_types_array_multiple"
				},
				{
					"include": "#php_doc_types_array_single"
				},
				{
					"include": "#php_doc_types"
				},
				{
					"match": "",
					"name": "punctuation.separator.delimiter.php"
				}
			]
		},
		"php_doc_types_array_single": {
			"match": "",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#php_doc_types"
						}
					]
				},
				"2": {
					"name": "keyword.other.array.phpdoc.php"
				}
			}
		},
		"regex-double-quoted": {
			"begin": "\"/(?=(\\\\.|[^\"/])++/[imsxeADSUXu]*\")",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"end": "(/)([imsxeADSUXu]*)(\")",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string.regexp.double-quoted.php",
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.regex.php"
				},
				{
					"include": "#interpolation_double_quoted"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.arbitrary-repetition.php"
						},
						"3": {
							"name": "punctuation.definition.arbitrary-repetition.php"
						}
					},
					"match": "",
					"name": "string.regexp.arbitrary-repetition.php"
				},
				{
					"begin": "\\[(?:\\^?\\])?",
					"captures": {
						"0": {
							"name": "punctuation.definition.character-class.php"
						}
					},
					"end": "\\]",
					"name": "string.regexp.character-class.php",
					"patterns": [
						{
							"include": "#interpolation_double_quoted"
						}
					]
				},
				{
					"match": "",
					"name": "keyword.operator.regexp.php"
				}
			]
		},
		"regex-single-quoted": {
			"begin": "'/(?=(\\\\(?:\\\\(?:\\\\[\\\\']?|[^'])|.)|[^'/])++/[imsxeADSUXu]*')",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"end": "(/)([imsxeADSUXu]*)(')",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string.regexp.single-quoted.php",
			"patterns": [
				{
					"include": "#single_quote_regex_escape"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.arbitrary-repetition.php"
						},
						"3": {
							"name": "punctuation.definition.arbitrary-repetition.php"
						}
					},
					"match": "",
					"name": "string.regexp.arbitrary-repetition.php"
				},
				{
					"begin": "\\[(?:\\^?\\])?",
					"captures": {
						"0": {
							"name": "punctuation.definition.character-class.php"
						}
					},
					"end": "\\]",
					"name": "string.regexp.character-class.php"
				},
				{
					"match": "",
					"name": "keyword.operator.regexp.php"
				}
			]
		},
		"scope-resolution": {
			"patterns": [
				{
					"match": "",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "",
									"name": "storage.type.php"
								},
								{
									"include": "#class-name"
								},
								{
									"include": "#variable-name"
								}
							]
						}
					}
				},
				{
					"begin": "(?i)(::)\\s*([a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.class.php"
						},
						"2": {
							"name": "entity.name.function.php"
						},
						"3": {
							"name": "punctuation.definition.arguments.begin.bracket.round.php"
						}
					},
					"end": "\\)|(?=\\?>)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.arguments.end.bracket.round.php"
						}
					},
					"name": "meta.method-call.static.php",
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.operator.class.php"
						},
						"2": {
							"name": "keyword.other.class.php"
						}
					}
				},
				{
					"match": "",
					"captures": {
						"1": {
							"name": "keyword.operator.class.php"
						},
						"2": {
							"name": "variable.other.class.php"
						},
						"3": {
							"name": "punctuation.definition.variable.php"
						},
						"4": {
							"name": "constant.other.class.php"
						}
					}
				}
			]
		},
		"single_quote_regex_escape": {
			"match": "",
			"name": "constant.character.escape.php"
		},
		"sql-string-double-quoted": {
			"begin": "\"\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND)\\b)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"contentName": "source.sql.embedded.php",
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string.quoted.double.sql.php",
			"patterns": [
				{
					"match": "",
					"name": "comment.line.number-sign.sql",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.sql"
						}
					}
				},
				{
					"match": "",
					"name": "comment.line.double-dash.sql",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.sql"
						}
					}
				},
				{
					"match": "",
					"name": "constant.character.escape.php"
				},
				{
					"match": "",
					"name": "string.quoted.single.unclosed.sql"
				},
				{
					"match": "",
					"name": "string.quoted.other.backtick.unclosed.sql"
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.sql",
					"patterns": [
						{
							"include": "#interpolation_double_quoted"
						}
					]
				},
				{
					"begin": "`",
					"end": "`",
					"name": "string.quoted.other.backtick.sql",
					"patterns": [
						{
							"include": "#interpolation_double_quoted"
						}
					]
				},
				{
					"include": "#interpolation_double_quoted"
				},
				{
					"include": "source.sql"
				}
			]
		},
		"sql-string-single-quoted": {
			"begin": "'\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|AND)\\b)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"contentName": "source.sql.embedded.php",
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string.quoted.single.sql.php",
			"patterns": [
				{
					"match": "",
					"name": "comment.line.number-sign.sql",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.sql"
						}
					}
				},
				{
					"match": "",
					"name": "comment.line.double-dash.sql",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.sql"
						}
					}
				},
				{
					"match": "",
					"name": "constant.character.escape.php"
				},
				{
					"match": "",
					"name": "string.quoted.other.backtick.unclosed.sql"
				},
				{
					"match": "",
					"name": "string.quoted.double.unclosed.sql"
				},
				{
					"include": "source.sql"
				}
			]
		},
		"string-backtick": {
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string.interpolated.php",
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.php"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		"string-double-quoted": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string.quoted.double.php",
			"patterns": [
				{
					"include": "#interpolation_double_quoted"
				}
			]
		},
		"string-single-quoted": {
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.php"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.php"
				}
			},
			"name": "string.quoted.single.php",
			"patterns": [
				{
					"match": "",
					"name": "constant.character.escape.php"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#regex-double-quoted"
				},
				{
					"include": "#sql-string-double-quoted"
				},
				{
					"include": "#string-double-quoted"
				},
				{
					"include": "#regex-single-quoted"
				},
				{
					"include": "#sql-string-single-quoted"
				},
				{
					"include": "#string-single-quoted"
				}
			]
		},
		"support": {
			"patterns": [
				{
					"match": "",
					"name": "support.function.apc.php"
				},
				{
					"match": "",
					"name": "support.function.array.php"
				},
				{
					"match": "",
					"name": "support.function.basic_functions.php"
				},
				{
					"match": "",
					"name": "support.function.bcmath.php"
				},
				{
					"match": "",
					"name": "support.function.blenc.php"
				},
				{
					"match": "",
					"name": "support.function.bz2.php"
				},
				{
					"match": "",
					"name": "support.function.calendar.php"
				},
				{
					"match": "",
					"name": "support.function.classobj.php"
				},
				{
					"match": "",
					"name": "support.function.com.php"
				},
				{
					"begin": "(?i)\\b(isset|unset|eval|empty|list)\\b",
					"name": "support.function.construct.php"
				},
				{
					"match": "",
					"name": "support.function.construct.output.php"
				},
				{
					"match": "",
					"name": "support.function.ctype.php"
				},
				{
					"match": "",
					"name": "support.function.curl.php"
				},
				{
					"match": "",
					"name": "support.function.datetime.php"
				},
				{
					"match": "",
					"name": "support.function.dba.php"
				},
				{
					"match": "",
					"name": "support.function.dbx.php"
				},
				{
					"match": "",
					"name": "support.function.dir.php"
				},
				{
					"match": "",
					"name": "support.function.eio.php"
				},
				{
					"match": "",
					"name": "support.function.enchant.php"
				},
				{
					"match": "",
					"name": "support.function.ereg.php"
				},
				{
					"match": "",
					"name": "support.function.errorfunc.php"
				},
				{
					"match": "",
					"name": "support.function.exec.php"
				},
				{
					"match": "",
					"name": "support.function.exif.php"
				},
				{
					"match": "",
					"name": "support.function.fann.php"
				},
				{
					"match": "",
					"name": "support.function.file.php"
				},
				{
					"match": "",
					"name": "support.function.fileinfo.php"
				},
				{
					"match": "",
					"name": "support.function.filter.php"
				},
				{
					"match": "",
					"name": "support.function.fpm.php"
				},
				{
					"match": "",
					"name": "support.function.funchand.php"
				},
				{
					"match": "",
					"name": "support.function.gettext.php"
				},
				{
					"match": "",
					"name": "support.function.gmp.php"
				},
				{
					"match": "",
					"name": "support.function.hash.php"
				},
				{
					"match": "",
					"name": "support.function.http.php"
				},
				{
					"match": "",
					"name": "support.function.iconv.php"
				},
				{
					"match": "",
					"name": "support.function.iisfunc.php"
				},
				{
					"match": "",
					"name": "support.function.image.php"
				},
				{
					"match": "",
					"name": "support.function.info.php"
				},
				{
					"match": "",
					"name": "support.function.interbase.php"
				},
				{
					"match": "",
					"name": "support.function.intl.php"
				},
				{
					"match": "",
					"name": "support.function.json.php"
				},
				{
					"match": "",
					"name": "support.function.ldap.php"
				},
				{
					"match": "",
					"name": "support.function.libxml.php"
				},
				{
					"match": "",
					"name": "support.function.mail.php"
				},
				{
					"match": "",
					"name": "support.function.math.php"
				},
				{
					"match": "",
					"name": "support.function.mbstring.php"
				},
				{
					"match": "",
					"name": "support.function.mcrypt.php"
				},
				{
					"match": "",
					"name": "support.function.memcache.php"
				},
				{
					"match": "",
					"name": "support.function.mhash.php"
				},
				{
					"match": "",
					"name": "support.function.mongo.php"
				},
				{
					"match": "",
					"name": "support.function.mysql.php"
				},
				{
					"match": "",
					"name": "support.function.mysqli.php"
				},
				{
					"match": "",
					"name": "support.function.mysqlnd-memcache.php"
				},
				{
					"match": "",
					"name": "support.function.mysqlnd-ms.php"
				},
				{
					"match": "",
					"name": "support.function.mysqlnd-qc.php"
				},
				{
					"match": "",
					"name": "support.function.mysqlnd-uh.php"
				},
				{
					"match": "",
					"name": "support.function.network.php"
				},
				{
					"match": "",
					"name": "support.function.nsapi.php"
				},
				{
					"match": "",
					"name": "support.function.oci8.php"
				},
				{
					"match": "",
					"name": "support.function.opcache.php"
				},
				{
					"match": "",
					"name": "support.function.openssl.php"
				},
				{
					"match": "",
					"name": "support.function.output.php"
				},
				{
					"match": "",
					"name": "support.function.password.php"
				},
				{
					"match": "",
					"name": "support.function.pcntl.php"
				},
				{
					"match": "",
					"name": "support.function.pgsql.php"
				},
				{
					"match": "",
					"name": "support.function.php_apache.php"
				},
				{
					"match": "",
					"name": "support.function.php_dom.php"
				},
				{
					"match": "",
					"name": "support.function.php_ftp.php"
				},
				{
					"match": "",
					"name": "support.function.php_imap.php"
				},
				{
					"match": "",
					"name": "support.function.php_mssql.php"
				},
				{
					"match": "",
					"name": "support.function.php_odbc.php"
				},
				{
					"match": "",
					"name": "support.function.php_pcre.php"
				},
				{
					"match": "",
					"name": "support.function.php_spl.php"
				},
				{
					"match": "",
					"name": "support.function.php_zip.php"
				},
				{
					"match": "",
					"name": "support.function.posix.php"
				},
				{
					"match": "",
					"name": "support.function.proctitle.php"
				},
				{
					"match": "",
					"name": "support.function.pspell.php"
				},
				{
					"match": "",
					"name": "support.function.readline.php"
				},
				{
					"match": "",
					"name": "support.function.recode.php"
				},
				{
					"match": "",
					"name": "support.function.rrd.php"
				},
				{
					"match": "",
					"name": "support.function.sem.php"
				},
				{
					"match": "",
					"name": "support.function.session.php"
				},
				{
					"match": "",
					"name": "support.function.shmop.php"
				},
				{
					"match": "",
					"name": "support.function.simplexml.php"
				},
				{
					"match": "",
					"name": "support.function.snmp.php"
				},
				{
					"match": "",
					"name": "support.function.soap.php"
				},
				{
					"match": "",
					"name": "support.function.sockets.php"
				},
				{
					"match": "",
					"name": "support.function.sqlite.php"
				},
				{
					"match": "",
					"name": "support.function.sqlsrv.php"
				},
				{
					"match": "",
					"name": "support.function.stats.php"
				},
				{
					"match": "",
					"name": "support.function.streamsfuncs.php"
				},
				{
					"match": "",
					"name": "support.function.string.php"
				},
				{
					"match": "",
					"name": "support.function.sybase.php"
				},
				{
					"match": "",
					"name": "support.function.taint.php"
				},
				{
					"match": "",
					"name": "support.function.tidy.php"
				},
				{
					"match": "",
					"name": "support.function.tokenizer.php"
				},
				{
					"match": "",
					"name": "support.function.trader.php"
				},
				{
					"match": "",
					"name": "support.function.uopz.php"
				},
				{
					"match": "",
					"name": "support.function.url.php"
				},
				{
					"match": "",
					"name": "support.function.var.php"
				},
				{
					"match": "",
					"name": "support.function.wddx.php"
				},
				{
					"match": "",
					"name": "support.function.xhprof.php"
				},
				{
					"match": "",
					"name": "support.function.xml.php"
				},
				{
					"match": "",
					"name": "support.function.xmlrpc.php"
				},
				{
					"match": "",
					"name": "support.function.xmlwriter.php"
				},
				{
					"match": "",
					"name": "support.function.zlib.php"
				},
				{
					"match": "",
					"name": "support.function.alias.php"
				}
			]
		},
		"switch_statement": {
			"patterns": [
				{
					"match": ""
				},
				{
					"begin": "\\bswitch\\b(?!\\s*\\(.*\\)\\s*:)",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.switch.php"
						}
					},
					"end": "}|(?=\\?>)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.section.switch-block.end.bracket.curly.php"
						}
					},
					"name": "meta.switch-statement.php",
					"patterns": [
						{
							"begin": "\\(",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.switch-expression.begin.bracket.round.php"
								}
							},
							"end": "\\)|(?=\\?>)",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.switch-expression.end.bracket.round.php"
								}
							},
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"begin": "{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.section.switch-block.begin.bracket.curly.php"
								}
							},
							"end": "(?=}|\\?>)",
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					]
				}
			]
		},
		"use-inner": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "(?i)\\b(as)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.use-as.php"
						}
					},
					"end": "(?i)[a-z_\\x{7f}-\\x{7fffffff}][a-z0-9_\\x{7f}-\\x{7fffffff}]*",
					"endCaptures": {
						"0": {
							"name": "entity.other.alias.php"
						}
					}
				},
				{
					"include": "#class-name"
				},
				{
					"match": "",
					"name": "punctuation.separator.delimiter.php"
				}
			]
		},
		"var_basic": {
			"patterns": [
				{
					"match": "",
					"name": "variable.other.php",
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.php"
						}
					}
				}
			]
		},
		"var_global": {
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.php"
				}
			},
			"match": "",
			"name": "variable.other.global.php"
		},
		"var_global_safer": {
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.php"
				}
			},
			"match": "",
			"name": "variable.other.global.safer.php"
		},
		"var_language": {
			"match": "",
			"name": "variable.language.this.php",
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.php"
				}
			}
		},
		"variable-name": {
			"patterns": [
				{
					"include": "#var_global"
				},
				{
					"include": "#var_global_safer"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.php"
						},
						"2": {
							"name": "punctuation.definition.variable.php"
						},
						"4": {
							"name": "keyword.operator.class.php"
						},
						"5": {
							"name": "variable.other.property.php"
						},
						"6": {
							"name": "punctuation.section.array.begin.php"
						},
						"7": {
							"name": "constant.numeric.index.php"
						},
						"8": {
							"name": "variable.other.index.php"
						},
						"9": {
							"name": "punctuation.definition.variable.php"
						},
						"10": {
							"name": "string.unquoted.index.php"
						},
						"11": {
							"name": "punctuation.section.array.end.php"
						}
					},
					"match": ""
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.php"
						},
						"2": {
							"name": "punctuation.definition.variable.php"
						},
						"4": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"match": ""
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"include": "#var_language"
				},
				{
					"include": "#var_global"
				},
				{
					"include": "#var_global_safer"
				},
				{
					"include": "#var_basic"
				},
				{
					"begin": "\\${(?=.*?})",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variable.php"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"ternary_shorthand": {
			"match": "",
			"name": "keyword.operator.ternary.php"
		},
		"ternary_expression": {
			"begin": "\\?",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.ternary.php"
				}
			},
			"end": ":",
			"endCaptures": {
				"0": {
					"name": "keyword.operator.ternary.php"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"null_coalescing": {
			"match": "",
			"name": "keyword.operator.null-coalescing.php"
		}
	}
}